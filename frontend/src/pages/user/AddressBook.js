// Address Book Component - Bharatshaala Platform
import React, { useState, useEffect } from 'react';
import { Helmet } from 'react-helmet-async';
import { motion } from 'framer-motion';
import { useAnalytics } from '../../utils/analytics';
import apiService from '../../utils/api';
import LoadingSpinner from '../../components/LoadingSpinner';

const AddressBook = () => {
  const { trackEvent, trackPageView } = useAnalytics();
  const [addresses, setAddresses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showAddForm, setShowAddForm] = useState(false);
  const [editingAddress, setEditingAddress] = useState(null);

  const [formData, setFormData] = useState({
    type: 'home',
    firstName: '',
    lastName: '',
    phone: '',
    addressLine1: '',
    addressLine2: '',
    city: '',
    state: '',
    pincode: '',
    landmark: '',
    isDefault: false
  });

  const addressTypes = [
    { value: 'home', label: '‡§ò‡§∞', icon: 'üè†' },
    { value: 'office', label: '‡§ë‡§´‡§ø‡§∏', icon: 'üè¢' },
    { value: 'other', label: '‡§Ö‡§®‡•ç‡§Ø', icon: 'üìç' }
  ];

  const indianStates = [
    '‡§Ü‡§Ç‡§ß‡•ç‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂', '‡§Ö‡§∞‡•Å‡§£‡§æ‡§ö‡§≤ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂', '‡§Ö‡§∏‡§Æ', '‡§¨‡§ø‡§π‡§æ‡§∞', '‡§õ‡§§‡•ç‡§§‡•Ä‡§∏‡§ó‡§¢‡§º', '‡§ó‡•ã‡§µ‡§æ', '‡§ó‡•Å‡§ú‡§∞‡§æ‡§§',
    '‡§π‡§∞‡§ø‡§Ø‡§æ‡§£‡§æ', '‡§π‡§ø‡§Æ‡§æ‡§ö‡§≤ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂', '‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§°', '‡§ï‡§∞‡•ç‡§®‡§æ‡§ü‡§ï', '‡§ï‡•á‡§∞‡§≤', '‡§Æ‡§ß‡•ç‡§Ø ‡§™‡•ç‡§∞‡§¶‡•á‡§∂', '‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞',
    '‡§Æ‡§£‡§ø‡§™‡•Å‡§∞', '‡§Æ‡•á‡§ò‡§æ‡§≤‡§Ø', '‡§Æ‡§ø‡§ú‡•ã‡§∞‡§Æ', '‡§®‡§æ‡§ó‡§æ‡§≤‡•à‡§Ç‡§°', '‡§ì‡§°‡§ø‡§∂‡§æ', '‡§™‡§Ç‡§ú‡§æ‡§¨', '‡§∞‡§æ‡§ú‡§∏‡•ç‡§•‡§æ‡§®', '‡§∏‡§ø‡§ï‡•ç‡§ï‡§ø‡§Æ',
    '‡§§‡§Æ‡§ø‡§≤‡§®‡§æ‡§°‡•Å', '‡§§‡•á‡§≤‡§Ç‡§ó‡§æ‡§®‡§æ', '‡§§‡•ç‡§∞‡§ø‡§™‡•Å‡§∞‡§æ', '‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂', '‡§â‡§§‡•ç‡§§‡§∞‡§æ‡§ñ‡§Ç‡§°', '‡§™‡§∂‡•ç‡§ö‡§ø‡§Æ ‡§¨‡§Ç‡§ó‡§æ‡§≤',
    '‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä', '‡§ú‡§Æ‡•ç‡§Æ‡•Ç ‡§î‡§∞ ‡§ï‡§∂‡•ç‡§Æ‡•Ä‡§∞', '‡§≤‡§¶‡•ç‡§¶‡§æ‡§ñ'
  ];

  useEffect(() => {
    trackPageView('address_book');
    loadAddresses();
  }, []);

  const loadAddresses = async () => {
    try {
      setLoading(true);
      const response = await apiService.getAddresses();
      if (response.success) {
        setAddresses(response.data);
      }
    } catch (error) {
      console.error('Failed to load addresses:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      let response;
      if (editingAddress) {
        response = await apiService.updateAddress(editingAddress.id, formData);
        trackEvent('address_updated', { type: formData.type });
      } else {
        response = await apiService.addAddress(formData);
        trackEvent('address_added', { type: formData.type });
      }

      if (response.success) {
        await loadAddresses();
        resetForm();
        alert(editingAddress ? '‡§™‡§§‡§æ ‡§Ö‡§™‡§°‡•á‡§ü ‡§π‡•ã ‡§ó‡§Ø‡§æ!' : '‡§®‡§Ø‡§æ ‡§™‡§§‡§æ ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ!');
      }
    } catch (error) {
      console.error('Failed to save address:', error);
      alert('‡§™‡§§‡§æ ‡§∏‡•á‡§µ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à');
    }
  };

  const handleEdit = (address) => {
    setEditingAddress(address);
    setFormData(address);
    setShowAddForm(true);
  };

  const handleDelete = async (addressId) => {
    if (window.confirm('‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§á‡§∏ ‡§™‡§§‡•á ‡§ï‡•ã ‡§π‡§ü‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?')) {
      try {
        const response = await apiService.deleteAddress(addressId);
        if (response.success) {
          await loadAddresses();
          trackEvent('address_deleted');
          alert('‡§™‡§§‡§æ ‡§π‡§ü‡§æ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ!');
        }
      } catch (error) {
        console.error('Failed to delete address:', error);
        alert('‡§™‡§§‡§æ ‡§π‡§ü‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à');
      }
    }
  };

  const resetForm = () => {
    setFormData({
      type: 'home',
      firstName: '',
      lastName: '',
      phone: '',
      addressLine1: '',
      addressLine2: '',
      city: '',
      state: '',
      pincode: '',
      landmark: '',
      isDefault: false
    });
    setEditingAddress(null);
    setShowAddForm(false);
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <LoadingSpinner size="large" text="‡§™‡§§‡•á ‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡•á ‡§π‡•à‡§Ç..." />
      </div>
    );
  }

  return (
    <>
      <Helmet>
        <title>‡§è‡§°‡•ç‡§∞‡•á‡§∏ ‡§¨‡•Å‡§ï - ‡§≠‡§æ‡§∞‡§§‡§∂‡§æ‡§≤‡§æ | Address Book</title>
        <meta name="description" content="‡§Ö‡§™‡§®‡•á ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§™‡§§‡•á ‡§Æ‡•à‡§®‡•á‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§®‡§è ‡§™‡§§‡•á ‡§ú‡•ã‡§°‡§º‡•á‡§Ç, ‡§Æ‡•å‡§ú‡•Ç‡§¶‡§æ ‡§™‡§§‡•á ‡§è‡§°‡§ø‡§ü ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§π‡§ü‡§æ‡§è‡§Ç‡•§" />
        <meta name="robots" content="noindex, follow" />
      </Helmet>

      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-4xl mx-auto">
          {/* Header */}
          <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-2xl font-bold text-gray-900">‡§è‡§°‡•ç‡§∞‡•á‡§∏ ‡§¨‡•Å‡§ï</h1>
                <p className="text-gray-600">‡§Ö‡§™‡§®‡•á ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§™‡§§‡•á ‡§Æ‡•à‡§®‡•á‡§ú ‡§ï‡§∞‡•á‡§Ç</p>
              </div>
              <button
                onClick={() => setShowAddForm(true)}
                className="bg-emerald-600 text-white px-4 py-2 rounded-lg hover:bg-emerald-700 transition-colors duration-200"
              >
                + ‡§®‡§Ø‡§æ ‡§™‡§§‡§æ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
              </button>
            </div>
          </div>

          {/* Address Form */}
          {showAddForm && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="bg-white rounded-lg shadow-lg p-6 mb-6"
            >
              <h2 className="text-xl font-bold text-gray-900 mb-4">
                {editingAddress ? '‡§™‡§§‡§æ ‡§è‡§°‡§ø‡§ü ‡§ï‡§∞‡•á‡§Ç' : '‡§®‡§Ø‡§æ ‡§™‡§§‡§æ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç'}
              </h2>
              
              <form onSubmit={handleSubmit} className="space-y-4">
                {/* Address Type */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ‡§™‡§§‡§æ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞
                  </label>
                  <div className="flex space-x-4">
                    {addressTypes.map((type) => (
                      <button
                        key={type.value}
                        type="button"
                        onClick={() => setFormData({...formData, type: type.value})}
                        className={`flex items-center space-x-2 px-4 py-2 rounded-lg border transition-colors duration-200 ${
                          formData.type === type.value
                            ? 'border-emerald-500 bg-emerald-50 text-emerald-700'
                            : 'border-gray-300 text-gray-700 hover:bg-gray-50'
                        }`}
                      >
                        <span>{type.icon}</span>
                        <span>{type.label}</span>
                      </button>
                    ))}
                  </div>
                </div>

                {/* Name Fields */}
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      ‡§™‡§π‡§≤‡§æ ‡§®‡§æ‡§Æ *
                    </label>
                    <input
                      type="text"
                      required
                      value={formData.firstName}
                      onChange={(e) => setFormData({...formData, firstName: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§®‡§æ‡§Æ *
                    </label>
                    <input
                      type="text"
                      required
                      value={formData.lastName}
                      onChange={(e) => setFormData({...formData, lastName: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                    />
                  </div>
                </div>

                {/* Phone */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    ‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ *
                  </label>
                  <input
                    type="tel"
                    required
                    value={formData.phone}
                    onChange={(e) => setFormData({...formData, phone: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  />
                </div>

                {/* Address Lines */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    ‡§™‡§§‡§æ ‡§≤‡§æ‡§á‡§® 1 *
                  </label>
                  <input
                    type="text"
                    required
                    value={formData.addressLine1}
                    onChange={(e) => setFormData({...formData, addressLine1: e.target.value})}
                    placeholder="‡§Æ‡§ï‡§æ‡§® ‡§®‡§Ç‡§¨‡§∞, ‡§∏‡§°‡§º‡§ï ‡§ï‡§æ ‡§®‡§æ‡§Æ"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    ‡§™‡§§‡§æ ‡§≤‡§æ‡§á‡§® 2
                  </label>
                  <input
                    type="text"
                    value={formData.addressLine2}
                    onChange={(e) => setFormData({...formData, addressLine2: e.target.value})}
                    placeholder="‡§á‡§≤‡§æ‡§ï‡§æ, ‡§ï‡•â‡§≤‡•ã‡§®‡•Ä"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  />
                </div>

                {/* City, State, Pincode */}
                <div className="grid md:grid-cols-3 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      ‡§∂‡§π‡§∞ *
                    </label>
                    <input
                      type="text"
                      required
                      value={formData.city}
                      onChange={(e) => setFormData({...formData, city: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      ‡§∞‡§æ‡§ú‡•ç‡§Ø *
                    </label>
                    <select
                      required
                      value={formData.state}
                      onChange={(e) => setFormData({...formData, state: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                    >
                      <option value="">‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç</option>
                      {indianStates.map((state) => (
                        <option key={state} value={state}>{state}</option>
                      ))}
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      ‡§™‡§ø‡§®‡§ï‡•ã‡§° *
                    </label>
                    <input
                      type="text"
                      required
                      pattern="[0-9]{6}"
                      value={formData.pincode}
                      onChange={(e) => setFormData({...formData, pincode: e.target.value})}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                    />
                  </div>
                </div>

                {/* Landmark */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    ‡§≤‡•à‡§Ç‡§°‡§Æ‡§æ‡§∞‡•ç‡§ï (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï)
                  </label>
                  <input
                    type="text"
                    value={formData.landmark}
                    onChange={(e) => setFormData({...formData, landmark: e.target.value})}
                    placeholder="‡§™‡§æ‡§∏ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§∏‡§ø‡§¶‡•ç‡§ß ‡§∏‡•ç‡§•‡§æ‡§®"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  />
                </div>

                {/* Default Address */}
                <div className="flex items-center">
                  <input
                    type="checkbox"
                    id="isDefault"
                    checked={formData.isDefault}
                    onChange={(e) => setFormData({...formData, isDefault: e.target.checked})}
                    className="mr-2"
                  />
                  <label htmlFor="isDefault" className="text-sm text-gray-700">
                    ‡§á‡§∏‡•á ‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü ‡§™‡§§‡§æ ‡§¨‡§®‡§æ‡§è‡§Ç
                  </label>
                </div>

                {/* Form Actions */}
                <div className="flex space-x-4 pt-4">
                  <button
                    type="submit"
                    className="bg-emerald-600 text-white px-6 py-2 rounded-lg hover:bg-emerald-700 transition-colors duration-200"
                  >
                    {editingAddress ? '‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç' : '‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç'}
                  </button>
                  <button
                    type="button"
                    onClick={resetForm}
                    className="bg-gray-300 text-gray-700 px-6 py-2 rounded-lg hover:bg-gray-400 transition-colors duration-200"
                  >
                    ‡§ï‡•à‡§Ç‡§∏‡§≤ ‡§ï‡§∞‡•á‡§Ç
                  </button>
                </div>
              </form>
            </motion.div>
          )}

          {/* Address List */}
          <div className="space-y-4">
            {addresses.length === 0 ? (
              <div className="bg-white rounded-lg shadow-lg p-8 text-center">
                <div className="text-4xl mb-4">üìç</div>
                <h3 className="text-xl font-semibold text-gray-900 mb-2">‡§ï‡•ã‡§à ‡§™‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ</h3>
                <p className="text-gray-600 mb-4">‡§Ö‡§™‡§®‡§æ ‡§™‡§π‡§≤‡§æ ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§™‡§§‡§æ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç</p>
                <button
                  onClick={() => setShowAddForm(true)}
                  className="bg-emerald-600 text-white px-6 py-2 rounded-lg hover:bg-emerald-700 transition-colors duration-200"
                >
                  ‡§™‡§§‡§æ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
                </button>
              </div>
            ) : (
              addresses.map((address, index) => (
                <motion.div
                  key={address.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className="bg-white rounded-lg shadow-lg p-6"
                >
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-2">
                        <span className="text-lg">
                          {addressTypes.find(t => t.value === address.type)?.icon}
                        </span>
                        <span className="font-semibold text-gray-900">
                          {addressTypes.find(t => t.value === address.type)?.label}
                        </span>
                        {address.isDefault && (
                          <span className="bg-emerald-100 text-emerald-800 px-2 py-1 rounded-full text-xs">
                            ‡§°‡§ø‡§´‡§º‡•â‡§≤‡•ç‡§ü
                          </span>
                        )}
                      </div>
                      
                      <div className="text-gray-700 space-y-1">
                        <p className="font-medium">{address.firstName} {address.lastName}</p>
                        <p>{address.addressLine1}</p>
                        {address.addressLine2 && <p>{address.addressLine2}</p>}
                        <p>{address.city}, {address.state} - {address.pincode}</p>
                        {address.landmark && <p>‡§≤‡•à‡§Ç‡§°‡§Æ‡§æ‡§∞‡•ç‡§ï: {address.landmark}</p>}
                        <p>‡§´‡•ã‡§®: {address.phone}</p>
                      </div>
                    </div>
                    
                    <div className="flex space-x-2 ml-4">
                      <button
                        onClick={() => handleEdit(address)}
                        className="text-blue-600 hover:text-blue-800 p-2"
                        title="‡§è‡§°‡§ø‡§ü ‡§ï‡§∞‡•á‡§Ç"
                      >
                        ‚úèÔ∏è
                      </button>
                      <button
                        onClick={() => handleDelete(address.id)}
                        className="text-red-600 hover:text-red-800 p-2"
                        title="‡§π‡§ü‡§æ‡§è‡§Ç"
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </div>
                </motion.div>
              ))
            )}
          </div>
        </div>
      </div>
    </>
  );
};

export default AddressBook;