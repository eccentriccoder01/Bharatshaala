// Reward Points Component - Bharatshaala Platform
import React, { useState, useEffect } from 'react';
import { Helmet } from 'react-helmet-async';
import { motion } from 'framer-motion';
import { useAnalytics } from '../../utils/analytics';
import { useAuth } from '../../hooks/useAuth';
import apiService from '../../utils/api';
import LoadingSpinner from '../../components/LoadingSpinner';
import { formatCurrency, formatDate } from '../../utils/helpers';

const RewardPoints = () => {
  const { trackEvent, trackPageView } = useAnalytics();
  const { user } = useAuth();
  const [loading, setLoading] = useState(true);
  const [rewardData, setRewardData] = useState({
    totalPoints: 0,
    availablePoints: 0,
    usedPoints: 0,
    expiringPoints: 0,
    transactions: [],
    rewards: []
  });
  const [selectedTab, setSelectedTab] = useState('overview');

  const tabs = [
    { id: 'overview', name: 'рдУрд╡рд░рд╡реНрдпреВ', icon: 'ЁЯУК' },
    { id: 'earn', name: 'рдХрдорд╛рдПрдВ', icon: 'ЁЯТ░' },
    { id: 'redeem', name: 'рд░рд┐рдбреАрдо рдХрд░реЗрдВ', icon: 'ЁЯОБ' },
    { id: 'history', name: 'рд╣рд┐рд╕реНрдЯреНрд░реА', icon: 'ЁЯУЬ' }
  ];

  const earnMethods = [
    {
      method: 'рд╕рд╛рдЗрди рдЕрдк рдмреЛрдирд╕',
      points: 100,
      description: 'рдЕрдХрд╛рдЙрдВрдЯ рдмрдирд╛рдиреЗ рдкрд░',
      icon: 'ЁЯОп',
      status: 'completed'
    },
    {
      method: 'рдСрд░реНрдбрд░ рдкрд░ рдкреЙрдЗрдВрдЯреНрд╕',
      points: '1 рдкреЙрдЗрдВрдЯ/тВ╣10',
      description: 'рд╣рд░ рдСрд░реНрдбрд░ рдкрд░ рдорд┐рд▓рддреЗ рд╣реИрдВ',
      icon: 'ЁЯЫНя╕П',
      status: 'active'
    },
    {
      method: 'рд░рд┐рд╡реНрдпреВ рд▓рд┐рдЦрдиреЗ рдкрд░',
      points: 50,
      description: 'рдкреНрд░реЛрдбрдХреНрдЯ рд░рд┐рд╡реНрдпреВ рд▓рд┐рдЦрдиреЗ рдкрд░',
      icon: 'тнР',
      status: 'active'
    },
    {
      method: 'рд░реЗрдлрд░рд▓ рдмреЛрдирд╕',
      points: 500,
      description: 'рджреЛрд╕реНрдд рдХреЛ рд░реЗрдлрд░ рдХрд░рдиреЗ рдкрд░',
      icon: 'ЁЯСе',
      status: 'active'
    },
    {
      method: 'рд╕реЛрд╢рд▓ рд╢реЗрдпрд░',
      points: 25,
      description: 'рдкреНрд░реЛрдбрдХреНрдЯ рд╢реЗрдпрд░ рдХрд░рдиреЗ рдкрд░',
      icon: 'ЁЯУ▒',
      status: 'active'
    },
    {
      method: 'рдиреНрдпреВрдЬрд╝рд▓реЗрдЯрд░ рд╕рдмреНрд╕рдХреНрд░рд┐рдкреНрд╢рди',
      points: 75,
      description: 'рдиреНрдпреВрдЬрд╝рд▓реЗрдЯрд░ рд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдм рдХрд░рдиреЗ рдкрд░',
      icon: 'ЁЯУз',
      status: 'pending'
    },
    {
      method: 'рдмрд░реНрдердбреЗ рдмреЛрдирд╕',
      points: 200,
      description: 'рдЬрдиреНрдорджрд┐рди рдкрд░ рд╡рд┐рд╢реЗрд╖ рдмреЛрдирд╕',
      icon: 'ЁЯОВ',
      status: 'annual'
    },
    {
      method: 'рдлреЗрд╕реНрдЯрд┐рд╡рд▓ рдмреЛрдирд╕',
      points: 300,
      description: 'рддреНрдпреЛрд╣рд╛рд░реЛрдВ рдкрд░ рд╡рд┐рд╢реЗрд╖ рдмреЛрдирд╕',
      icon: 'ЁЯОЙ',
      status: 'seasonal'
    }
  ];

  const redeemOptions = [
    {
      type: 'discount',
      title: 'тВ╣50 рдЫреВрдЯ',
      points: 500,
      description: 'тВ╣500+ рдХреЗ рдСрд░реНрдбрд░ рдкрд░',
      icon: 'ЁЯТ╕',
      available: true
    },
    {
      type: 'discount',
      title: 'тВ╣100 рдЫреВрдЯ',
      points: 1000,
      description: 'тВ╣1000+ рдХреЗ рдСрд░реНрдбрд░ рдкрд░',
      icon: 'ЁЯТ╕',
      available: true
    },
    {
      type: 'discount',
      title: 'тВ╣250 рдЫреВрдЯ',
      points: 2500,
      description: 'тВ╣2500+ рдХреЗ рдСрд░реНрдбрд░ рдкрд░',
      icon: 'ЁЯТ╕',
      available: true
    },
    {
      type: 'discount',
      title: 'тВ╣500 рдЫреВрдЯ',
      points: 5000,
      description: 'тВ╣5000+ рдХреЗ рдСрд░реНрдбрд░ рдкрд░',
      icon: 'ЁЯТ╕',
      available: true
    },
    {
      type: 'shipping',
      title: 'рдлреНрд░реА рд╢рд┐рдкрд┐рдВрдЧ',
      points: 300,
      description: 'рдЕрдЧрд▓реЗ 3 рдСрд░реНрдбрд░реНрд╕ рдкрд░',
      icon: 'ЁЯЪЪ',
      available: true
    },
    {
      type: 'gift',
      title: 'рдЧрд┐рдлреНрдЯ рд╣реИрдореНрдкрд░',
      points: 10000,
      description: 'рд╕реНрдкреЗрд╢рд▓ рдЧрд┐рдлреНрдЯ рд╣реИрдореНрдкрд░',
      icon: 'ЁЯОБ',
      available: false
    },
    {
      type: 'voucher',
      title: 'рдЕрдореЗрдЬрд╝рди рд╡рд╛рдЙрдЪрд░',
      points: 1500,
      description: 'тВ╣100 рдЕрдореЗрдЬрд╝рди рд╡рд╛рдЙрдЪрд░',
      icon: 'ЁЯОЯя╕П',
      available: true
    },
    {
      type: 'premium',
      title: 'рдкреНрд░реАрдорд┐рдпрдо рдореЗрдВрдмрд░рд╢рд┐рдк',
      points: 15000,
      description: '1 рд╕рд╛рд▓ рдкреНрд░реАрдорд┐рдпрдо рдПрдХреНрд╕реЗрд╕',
      icon: 'ЁЯСС',
      available: false
    }
  ];

  const statusColors = {
    earned: 'green',
    redeemed: 'blue',
    expired: 'red',
    pending: 'yellow'
  };

  useEffect(() => {
    trackPageView('reward_points');
    loadRewardData();
  }, []);

  const loadRewardData = async () => {
    try {
      setLoading(true);
      const response = await apiService.get('/user/reward-points');
      if (response.success) {
        setRewardData(response.data);
      }
    } catch (error) {
      console.error('Failed to load reward data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleRedeemReward = async (reward) => {
    if (rewardData.availablePoints < reward.points) {
      alert('рдкрд░реНрдпрд╛рдкреНрдд рдкреЙрдЗрдВрдЯреНрд╕ рдирд╣реАрдВ рд╣реИрдВ');
      return;
    }

    if (!reward.available) {
      alert('рдпрд╣ рд░рд┐рд╡рд╛рд░реНрдб рдлрд┐рд▓рд╣рд╛рд▓ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИ');
      return;
    }

    try {
      const response = await apiService.post('/user/redeem-reward', {
        type: reward.type,
        title: reward.title,
        points: reward.points
      });

      if (response.success) {
        await loadRewardData();
        trackEvent('reward_redeemed', {
          rewardType: reward.type,
          rewardTitle: reward.title,
          pointsUsed: reward.points,
          userId: user?.id
        });
        alert(`${reward.title} рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд░рд┐рдбреАрдо рд╣реБрдЖ!`);
      }
    } catch (error) {
      console.error('Failed to redeem reward:', error);
      alert('рд░рд┐рд╡рд╛рд░реНрдб рд░рд┐рдбреАрдо рдХрд░рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реБрдИ');
    }
  };

  const getPointsExpiringInfo = () => {
    const expiringIn30Days = rewardData.expiringPoints || 0;
    if (expiringIn30Days > 0) {
      return {
        message: `${expiringIn30Days} рдкреЙрдЗрдВрдЯреНрд╕ 30 рджрд┐рди рдореЗрдВ рдПрдХреНрд╕рдкрд╛рдпрд░ рд╣реЛ рдЬрд╛рдПрдВрдЧреЗ`,
        color: 'red'
      };
    }
    return null;
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <LoadingSpinner size="large" text="рд░рд┐рд╡рд╛рд░реНрдб рдкреЙрдЗрдВрдЯреНрд╕ рд▓реЛрдб рд╣реЛ рд░рд╣реЗ рд╣реИрдВ..." />
      </div>
    );
  }

  const expiringInfo = getPointsExpiringInfo();

  return (
    <>
      <Helmet>
        <title>рд░рд┐рд╡рд╛рд░реНрдб рдкреЙрдЗрдВрдЯреНрд╕ - рднрд╛рд░рддрд╢рд╛рд▓рд╛ | Reward Points</title>
        <meta name="description" content="рдЕрдкрдиреЗ рд░рд┐рд╡рд╛рд░реНрдб рдкреЙрдЗрдВрдЯреНрд╕ рджреЗрдЦреЗрдВ рдФрд░ рдЙрдиреНрд╣реЗрдВ рдЫреВрдЯ рдФрд░ рдЧрд┐рдлреНрдЯреНрд╕ рдХреЗ рд▓рд┐рдП рд░рд┐рдбреАрдо рдХрд░реЗрдВред" />
        <meta name="robots" content="noindex, follow" />
      </Helmet>

      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-6xl mx-auto">
          {/* Header */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-gradient-to-r from-yellow-600 to-orange-600 text-white rounded-lg p-8 mb-6"
          >
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-3xl font-bold mb-2">рд░рд┐рд╡рд╛рд░реНрдб рдкреЙрдЗрдВрдЯреНрд╕</h1>
                <p className="text-xl opacity-90">
                  рдЦрд░реАрджрд╛рд░реА рдХрд░реЗрдВ, рдкреЙрдЗрдВрдЯреНрд╕ рдХрдорд╛рдПрдВ рдФрд░ рд░рд┐рд╡рд╛рд░реНрдбреНрд╕ рдкрд╛рдПрдВ!
                </p>
              </div>
              <div className="text-center">
                <div className="text-5xl font-bold mb-2">{rewardData.availablePoints}</div>
                <div className="text-lg">рдЙрдкрд▓рдмреНрдз рдкреЙрдЗрдВрдЯреНрд╕</div>
              </div>
            </div>
            
            {expiringInfo && (
              <div className={`mt-4 p-3 bg-${expiringInfo.color}-100 text-${expiringInfo.color}-800 rounded-lg`}>
                <p className="text-sm">тЪая╕П {expiringInfo.message}</p>
              </div>
            )}
          </motion.div>

          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.1 }}
              className="bg-white rounded-lg shadow-lg p-6"
            >
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600 mb-1">рдХреБрд▓ рдкреЙрдЗрдВрдЯреНрд╕</p>
                  <p className="text-2xl font-bold text-gray-900">{rewardData.totalPoints}</p>
                </div>
                <div className="bg-yellow-100 p-3 rounded-full">
                  <span className="text-2xl">тнР</span>
                </div>
              </div>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
              className="bg-white rounded-lg shadow-lg p-6"
            >
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600 mb-1">рдЙрдкрд▓рдмреНрдз рдкреЙрдЗрдВрдЯреНрд╕</p>
                  <p className="text-2xl font-bold text-gray-900">{rewardData.availablePoints}</p>
                </div>
                <div className="bg-green-100 p-3 rounded-full">
                  <span className="text-2xl">ЁЯТ░</span>
                </div>
              </div>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 }}
              className="bg-white rounded-lg shadow-lg p-6"
            >
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600 mb-1">рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд┐рдП рдЧрдП</p>
                  <p className="text-2xl font-bold text-gray-900">{rewardData.usedPoints}</p>
                </div>
                <div className="bg-blue-100 p-3 rounded-full">
                  <span className="text-2xl">ЁЯОБ</span>
                </div>
              </div>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.4 }}
              className="bg-white rounded-lg shadow-lg p-6"
            >
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600 mb-1">рдкреЙрдЗрдВрдЯреНрд╕ рд╡реИрд▓реНрдпреВ</p>
                  <p className="text-2xl font-bold text-gray-900">{formatCurrency(rewardData.availablePoints / 10)}</p>
                </div>
                <div className="bg-purple-100 p-3 rounded-full">
                  <span className="text-2xl">ЁЯТО</span>
                </div>
              </div>
            </motion.div>
          </div>

          {/* Tabs */}
          <div className="bg-white rounded-lg shadow-lg mb-6">
            <div className="border-b border-gray-200">
              <nav className="flex space-x-8 px-6">
                {tabs.map((tab) => (
                  <button
                    key={tab.id}
                    onClick={() => setSelectedTab(tab.id)}
                    className={`flex items-center space-x-2 py-4 border-b-2 font-medium text-sm transition-colors duration-200 ${
                      selectedTab === tab.id
                        ? 'border-yellow-500 text-yellow-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700'
                    }`}
                  >
                    <span>{tab.icon}</span>
                    <span>{tab.name}</span>
                  </button>
                ))}
              </nav>
            </div>

            <div className="p-6">
              {/* Overview Tab */}
              {selectedTab === 'overview' && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="space-y-6"
                >
                  <div className="grid md:grid-cols-2 gap-6">
                    <div className="bg-gradient-to-r from-green-50 to-blue-50 rounded-lg p-6">
                      <h3 className="text-lg font-semibold text-gray-900 mb-4">рдкреЙрдЗрдВрдЯреНрд╕ рдХрд╛ рдореВрд▓реНрдп</h3>
                      <div className="space-y-2">
                        <p className="text-sm text-gray-600">тАв 10 рдкреЙрдЗрдВрдЯреНрд╕ = тВ╣1 рдХреА рдЫреВрдЯ</p>
                        <p className="text-sm text-gray-600">тАв 500 рдкреЙрдЗрдВрдЯреНрд╕ = тВ╣50 рдбрд┐рд╕реНрдХрд╛рдЙрдВрдЯ рд╡рд╛рдЙрдЪрд░</p>
                        <p className="text-sm text-gray-600">тАв рдкреЙрдЗрдВрдЯреНрд╕ рдХреА рдХреЛрдИ рдПрдХреНрд╕рдкрд╛рдпрд░реА рдирд╣реАрдВ (1 рд╕рд╛рд▓ рддрдХ)</p>
                        <p className="text-sm text-gray-600">тАв рдорд┐рдирд┐рдордо рд░рд┐рдбреАрдо: 300 рдкреЙрдЗрдВрдЯреНрд╕</p>
                      </div>
                    </div>
                    
                    <div className="bg-gradient-to-r from-yellow-50 to-orange-50 rounded-lg p-6">
                      <h3 className="text-lg font-semibold text-gray-900 mb-4">рдХреИрд╕реЗ рдХрдорд╛рдПрдВ?</h3>
                      <div className="space-y-2">
                        <p className="text-sm text-gray-600">тАв рд╣рд░ тВ╣10 рдХреЗ рдСрд░реНрдбрд░ рдкрд░ 1 рдкреЙрдЗрдВрдЯ</p>
                        <p className="text-sm text-gray-600">тАв рд░рд┐рд╡реНрдпреВ рд▓рд┐рдЦрдиреЗ рдкрд░ 50 рдкреЙрдЗрдВрдЯреНрд╕</p>
                        <p className="text-sm text-gray-600">тАв рд░реЗрдлрд░рд▓ рдкрд░ 500 рдкреЙрдЗрдВрдЯреНрд╕</p>
                        <p className="text-sm text-gray-600">тАв рд╕реЛрд╢рд▓ рд╢реЗрдпрд░ рдкрд░ 25 рдкреЙрдЗрдВрдЯреНрд╕</p>
                      </div>
                    </div>
                  </div>

                  <div className="bg-blue-50 rounded-lg p-6">
                    <h3 className="text-lg font-semibold text-blue-900 mb-3">рдкреНрд░реЛ рдЯрд┐рдкреНрд╕</h3>
                    <ul className="text-blue-800 text-sm space-y-1">
                      <li>тАв рдмрдбрд╝реЗ рдСрд░реНрдбрд░реНрд╕ рд╕реЗ рдЬреНрдпрд╛рджрд╛ рдкреЙрдЗрдВрдЯреНрд╕ рдорд┐рд▓рддреЗ рд╣реИрдВ</li>
                      <li>тАв рдлреЗрд╕реНрдЯрд┐рд╡рд▓ рд╕реАрдЬрд╝рди рдореЗрдВ рдбрдмрд▓ рдкреЙрдЗрдВрдЯреНрд╕</li>
                      <li>тАв рдкреНрд░реАрдорд┐рдпрдо рдореЗрдВрдмрд░реНрд╕ рдХреЛ 50% рдмреЛрдирд╕ рдкреЙрдЗрдВрдЯреНрд╕</li>
                      <li>тАв рдкреЙрдЗрдВрдЯреНрд╕ рдХреЛ рдЫреВрдЯ рдХреЗ рд╕рд╛рде рдХреЙрдореНрдмрд╛рдЗрди рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ</li>
                    </ul>
                  </div>
                </motion.div>
              )}

              {/* Earn Tab */}
              {selectedTab === 'earn' && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="grid md:grid-cols-2 gap-6"
                >
                  {earnMethods.map((method, index) => (
                    <div
                      key={index}
                      className={`p-4 rounded-lg border-2 transition-colors duration-200 ${
                        method.status === 'completed' 
                          ? 'border-green-200 bg-green-50' :
                        method.status === 'active'
                          ? 'border-blue-200 bg-blue-50' :
                        method.status === 'pending'
                          ? 'border-yellow-200 bg-yellow-50' :
                          'border-gray-200 bg-gray-50'
                      }`}
                    >
                      <div className="flex items-start justify-between">
                        <div className="flex items-start space-x-3">
                          <span className="text-2xl">{method.icon}</span>
                          <div>
                            <h3 className="font-semibold text-gray-900">{method.method}</h3>
                            <p className="text-sm text-gray-600 mb-1">{method.description}</p>
                            <p className="text-lg font-bold text-green-600">{method.points} рдкреЙрдЗрдВрдЯреНрд╕</p>
                          </div>
                        </div>
                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                          method.status === 'completed' ? 'bg-green-100 text-green-800' :
                          method.status === 'active' ? 'bg-blue-100 text-blue-800' :
                          method.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                          'bg-gray-100 text-gray-800'
                        }`}>
                          {method.status === 'completed' ? 'рдкреВрд░реНрдг' :
                           method.status === 'active' ? 'рд╕рдХреНрд░рд┐рдп' :
                           method.status === 'pending' ? 'рдкреНрд░рддреАрдХреНрд╖рд╛ рдореЗрдВ' : 'рдЖрдЧрд╛рдореА'}
                        </span>
                      </div>
                    </div>
                  ))}
                </motion.div>
              )}

              {/* Redeem Tab */}
              {selectedTab === 'redeem' && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="grid md:grid-cols-2 lg:grid-cols-3 gap-6"
                >
                  {redeemOptions.map((option, index) => (
                    <div
                      key={index}
                      className={`p-6 rounded-lg border transition-all duration-200 hover:shadow-lg ${
                        option.available && rewardData.availablePoints >= option.points
                          ? 'border-green-200 bg-white'
                          : 'border-gray-200 bg-gray-50 opacity-60'
                      }`}
                    >
                      <div className="text-center">
                        <span className="text-4xl mb-3 block">{option.icon}</span>
                        <h3 className="text-lg font-bold text-gray-900 mb-2">{option.title}</h3>
                        <p className="text-sm text-gray-600 mb-3">{option.description}</p>
                        <div className="text-2xl font-bold text-yellow-600 mb-4">
                          {option.points} рдкреЙрдЗрдВрдЯреНрд╕
                        </div>
                        
                        <button
                          onClick={() => handleRedeemReward(option)}
                          disabled={!option.available || rewardData.availablePoints < option.points}
                          className={`w-full py-2 px-4 rounded-lg font-semibold transition-colors duration-200 ${
                            option.available && rewardData.availablePoints >= option.points
                              ? 'bg-yellow-600 text-white hover:bg-yellow-700'
                              : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                          }`}
                        >
                          {!option.available ? 'рдЕрдиреБрдкрд▓рдмреНрдз' :
                           rewardData.availablePoints < option.points ? 'рдкрд░реНрдпрд╛рдкреНрдд рдкреЙрдЗрдВрдЯреНрд╕ рдирд╣реАрдВ' :
                           'рд░рд┐рдбреАрдо рдХрд░реЗрдВ'}
                        </button>
                      </div>
                    </div>
                  ))}
                </motion.div>
              )}

              {/* History Tab */}
              {selectedTab === 'history' && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                >
                  {rewardData.transactions.length === 0 ? (
                    <div className="text-center py-12">
                      <div className="text-4xl mb-4">ЁЯУЬ</div>
                      <h3 className="text-xl font-semibold text-gray-900 mb-2">рдХреЛрдИ рдЯреНрд░рд╛рдВрдЬрд╝реИрдХреНрд╢рди рдирд╣реАрдВ рдорд┐рд▓реА</h3>
                      <p className="text-gray-600">рдЕрднреА рддрдХ рдХреЛрдИ рдкреЙрдЗрдВрдЯреНрд╕ рдЯреНрд░рд╛рдВрдЬрд╝реИрдХреНрд╢рди рдирд╣реАрдВ рд╣реБрдИ рд╣реИ</p>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      {rewardData.transactions.map((transaction, index) => (
                        <div key={index} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                          <div className="flex items-center space-x-4">
                            <div className={`w-3 h-3 rounded-full bg-${statusColors[transaction.type]}-500`}></div>
                            <div>
                              <h3 className="font-semibold text-gray-900">{transaction.description}</h3>
                              <p className="text-sm text-gray-600">{formatDate(transaction.date)}</p>
                              {transaction.orderId && (
                                <p className="text-xs text-gray-500">рдСрд░реНрдбрд░ ID: {transaction.orderId}</p>
                              )}
                            </div>
                          </div>
                          <div className="text-right">
                            <p className={`font-bold ${
                              transaction.type === 'earned' ? 'text-green-600' : 'text-red-600'
                            }`}>
                              {transaction.type === 'earned' ? '+' : '-'}{transaction.points} рдкреЙрдЗрдВрдЯреНрд╕
                            </p>
                            <p className="text-xs text-gray-500">
                              {transaction.type === 'earned' ? 'рдХрдорд╛рдП' : 
                               transaction.type === 'redeemed' ? 'рд░рд┐рдбреАрдо рдХрд┐рдП' :
                               transaction.type === 'expired' ? 'рдПрдХреНрд╕рдкрд╛рдпрд░ рд╣реБрдП' : 'рдкреНрд░рддреАрдХреНрд╖рд╛ рдореЗрдВ'}
                            </p>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </motion.div>
              )}
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default RewardPoints;