// Referral Program Component - Bharatshala Platform
import React, { useState, useEffect } from 'react';
import { Helmet } from 'react-helmet-async';
import { motion } from 'framer-motion';
import { useAnalytics } from '../../utils/analytics';
import { useAuth } from '../../hooks/useAuth';
import apiService from '../../utils/api';
import LoadingSpinner from '../../components/LoadingSpinner';
import { formatCurrency, copyToClipboard } from '../../utils/helpers';

const ReferralProgram = () => {
  const { trackEvent, trackPageView } = useAnalytics();
  const { user } = useAuth();
  const [loading, setLoading] = useState(true);
  const [referralData, setReferralData] = useState({
    referralCode: '',
    totalReferrals: 0,
    totalEarnings: 0,
    pendingEarnings: 0,
    referrals: [],
    stats: {}
  });
  const [inviteForm, setInviteForm] = useState({
    emails: [''],
    message: '‡§≠‡§æ‡§∞‡§§‡§∂‡§æ‡§≤‡§æ ‡§™‡§∞ ‡§Æ‡•á‡§∞‡•á ‡§∏‡§æ‡§• ‡§ú‡•Å‡§°‡§º‡•á‡§Ç ‡§î‡§∞ ‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡•ã‡§Ç ‡§ï‡•Ä ‡§ñ‡§∞‡•Ä‡§¶‡§æ‡§∞‡•Ä ‡§ï‡§∞‡•á‡§Ç!'
  });
  const [showInviteForm, setShowInviteForm] = useState(false);

  const referralTiers = [
    {
      tier: '‡§¨‡•ç‡§∞‡•â‡§®‡•ç‡§ú',
      minReferrals: 0,
      maxReferrals: 4,
      commission: 5,
      bonus: 0,
      color: 'orange',
      icon: 'ü•â'
    },
    {
      tier: '‡§∏‡§ø‡§≤‡•ç‡§µ‡§∞',
      minReferrals: 5,
      maxReferrals: 14,
      commission: 7.5,
      bonus: 500,
      color: 'gray',
      icon: 'ü•à'
    },
    {
      tier: '‡§ó‡•ã‡§≤‡•ç‡§°',
      minReferrals: 15,
      maxReferrals: 49,
      commission: 10,
      bonus: 1500,
      color: 'yellow',
      icon: 'ü•á'
    },
    {
      tier: '‡§™‡•ç‡§≤‡•á‡§ü‡§ø‡§®‡§Æ',
      minReferrals: 50,
      maxReferrals: Infinity,
      commission: 15,
      bonus: 5000,
      color: 'purple',
      icon: 'üíé'
    }
  ];

  const rewardTypes = [
    {
      type: 'signup',
      title: '‡§∏‡§æ‡§á‡§® ‡§Ö‡§™ ‡§¨‡•ã‡§®‡§∏',
      description: '‡§ú‡§¨ ‡§ï‡•ã‡§à ‡§Ü‡§™‡§ï‡•á ‡§ï‡•ã‡§° ‡§∏‡•á ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à',
      reward: '‚Çπ100',
      icon: 'üéÅ'
    },
    {
      type: 'first_order',
      title: '‡§™‡§π‡§≤‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞',
      description: '‡§ú‡§¨ ‡§∞‡•á‡§´‡§∞ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø ‡§™‡§π‡§≤‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à',
      reward: '‚Çπ500',
      icon: 'üõçÔ∏è'
    },
    {
      type: 'commission',
      title: '‡§ï‡§Æ‡•Ä‡§∂‡§®',
      description: '‡§π‡§∞ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§™‡§∞ ‡§ï‡§Æ‡•Ä‡§∂‡§® (‡§ü‡§ø‡§Ø‡§∞ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞)',
      reward: '5-15%',
      icon: 'üí∞'
    },
    {
      type: 'milestone',
      title: '‡§Æ‡§æ‡§á‡§≤‡§∏‡•ç‡§ü‡•ã‡§® ‡§¨‡•ã‡§®‡§∏',
      description: '‡§ü‡§ø‡§Ø‡§∞ ‡§Ö‡§™‡§ó‡•ç‡§∞‡•á‡§° ‡§™‡§∞ ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§¨‡•ã‡§®‡§∏',
      reward: '‚Çπ500-5000',
      icon: 'üèÜ'
    }
  ];

  const socialPlatforms = [
    {
      name: 'WhatsApp',
      icon: 'üí¨',
      color: 'green',
      shareUrl: 'https://wa.me/?text='
    },
    {
      name: 'Facebook',
      icon: 'üìò',
      color: 'blue',
      shareUrl: 'https://www.facebook.com/sharer/sharer.php?u='
    },
    {
      name: 'Twitter',
      icon: 'üê¶',
      color: 'blue',
      shareUrl: 'https://twitter.com/intent/tweet?text='
    },
    {
      name: 'LinkedIn',
      icon: 'üíº',
      color: 'blue',
      shareUrl: 'https://www.linkedin.com/sharing/share-offsite/?url='
    },
    {
      name: 'Telegram',
      icon: '‚úàÔ∏è',
      color: 'blue',
      shareUrl: 'https://t.me/share/url?url='
    }
  ];

  useEffect(() => {
    trackPageView('referral_program');
    loadReferralData();
  }, []);

  const loadReferralData = async () => {
    try {
      setLoading(true);
      const response = await apiService.get('/user/referral-data');
      if (response.success) {
        setReferralData(response.data);
      }
    } catch (error) {
      console.error('Failed to load referral data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleCopyReferralCode = async () => {
    const success = await copyToClipboard(referralData.referralCode);
    if (success) {
      trackEvent('referral_code_copied', {
        userId: user?.id,
        referralCode: referralData.referralCode
      });
      alert('‡§∞‡•á‡§´‡§∞‡§≤ ‡§ï‡•ã‡§° ‡§ï‡•â‡§™‡•Ä ‡§π‡•ã ‡§ó‡§Ø‡§æ!');
    } else {
      alert('‡§ï‡•â‡§™‡•Ä ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à');
    }
  };

  const handleShareToSocial = (platform) => {
    const referralUrl = `https://bharatshala.com/signup?ref=${referralData.referralCode}`;
    const shareText = `‡§≠‡§æ‡§∞‡§§‡§∂‡§æ‡§≤‡§æ ‡§™‡§∞ ‡§ú‡•Å‡§°‡§º‡•á‡§Ç ‡§î‡§∞ ‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡•ã‡§Ç ‡§ï‡•Ä ‡§ñ‡§∞‡•Ä‡§¶‡§æ‡§∞‡•Ä ‡§ï‡§∞‡•á‡§Ç! ‡§Æ‡•á‡§∞‡§æ ‡§∞‡•á‡§´‡§∞‡§≤ ‡§ï‡•ã‡§°: ${referralData.referralCode}`;
    
    const shareUrl = platform.shareUrl + encodeURIComponent(
      platform.name === 'WhatsApp' || platform.name === 'Telegram' 
        ? `${shareText} ${referralUrl}`
        : referralUrl
    );

    window.open(shareUrl, '_blank');
    
    trackEvent('referral_shared', {
      platform: platform.name,
      userId: user?.id,
      referralCode: referralData.referralCode
    });
  };

  const handleSendInvites = async (e) => {
    e.preventDefault();
    
    try {
      const validEmails = inviteForm.emails.filter(email => email.trim() !== '');
      if (validEmails.length === 0) {
        alert('‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ ‡§è‡§ï ‡§à‡§Æ‡•á‡§≤ ‡§™‡§§‡§æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç');
        return;
      }

      const response = await apiService.post('/user/send-referral-invites', {
        emails: validEmails,
        message: inviteForm.message,
        referralCode: referralData.referralCode
      });

      if (response.success) {
        trackEvent('referral_invites_sent', {
          count: validEmails.length,
          userId: user?.id
        });
        alert('‡§á‡§®‡§µ‡§æ‡§á‡§ü‡•ç‡§∏ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§≠‡•á‡§ú‡•á ‡§ó‡§è!');
        setInviteForm({ emails: [''], message: inviteForm.message });
        setShowInviteForm(false);
      }
    } catch (error) {
      console.error('Failed to send invites:', error);
      alert('‡§á‡§®‡§µ‡§æ‡§á‡§ü‡•ç‡§∏ ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à');
    }
  };

  const addEmailField = () => {
    setInviteForm({
      ...inviteForm,
      emails: [...inviteForm.emails, '']
    });
  };

  const removeEmailField = (index) => {
    const newEmails = inviteForm.emails.filter((_, i) => i !== index);
    setInviteForm({
      ...inviteForm,
      emails: newEmails.length > 0 ? newEmails : ['']
    });
  };

  const updateEmail = (index, value) => {
    const newEmails = [...inviteForm.emails];
    newEmails[index] = value;
    setInviteForm({
      ...inviteForm,
      emails: newEmails
    });
  };

  const getCurrentTier = () => {
    return referralTiers.find(tier => 
      referralData.totalReferrals >= tier.minReferrals && 
      referralData.totalReferrals <= tier.maxReferrals
    ) || referralTiers[0];
  };

  const getNextTier = () => {
    const currentTier = getCurrentTier();
    return referralTiers.find(tier => tier.minReferrals > currentTier.maxReferrals);
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <LoadingSpinner size="large" text="‡§∞‡•á‡§´‡§∞‡§≤ ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à..." />
      </div>
    );
  }

  const currentTier = getCurrentTier();
  const nextTier = getNextTier();

  return (
    <>
      <Helmet>
        <title>‡§∞‡•á‡§´‡§∞‡§≤ ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ - ‡§≠‡§æ‡§∞‡§§‡§∂‡§æ‡§≤‡§æ | Referral Program</title>
        <meta name="description" content="‡§¶‡•ã‡§∏‡•ç‡§§‡•ã‡§Ç ‡§ï‡•ã ‡§∞‡•á‡§´‡§∞ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§™‡•à‡§∏‡•á ‡§ï‡§Æ‡§æ‡§è‡§Ç‡•§ ‡§π‡§∞ ‡§∞‡•á‡§´‡§∞‡§≤ ‡§™‡§∞ ‡§¨‡•ã‡§®‡§∏ ‡§î‡§∞ ‡§ï‡§Æ‡•Ä‡§∂‡§® ‡§™‡§æ‡§è‡§Ç‡•§" />
        <meta name="robots" content="noindex, follow" />
      </Helmet>

      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-6xl mx-auto">
          {/* Header */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg p-8 mb-6"
          >
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-3xl font-bold mb-2">‡§∞‡•á‡§´‡§∞‡§≤ ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ</h1>
                <p className="text-xl opacity-90">
                  ‡§¶‡•ã‡§∏‡•ç‡§§‡•ã‡§Ç ‡§ï‡•ã ‡§á‡§®‡§µ‡§æ‡§á‡§ü ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‚Çπ500 ‡§§‡§ï ‡§ï‡§Æ‡§æ‡§è‡§Ç!
                </p>
              </div>
              <div className="text-center">
                <div className="text-4xl mb-2">{currentTier.icon}</div>
                <div className="text-lg font-semibold">{currentTier.tier} ‡§∏‡•ç‡§§‡§∞</div>
                <div className="text-sm opacity-80">{currentTier.commission}% ‡§ï‡§Æ‡•Ä‡§∂‡§®</div>
              </div>
            </div>
          </motion.div>

          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.1 }}
              className="bg-white rounded-lg shadow-lg p-6"
            >
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600 mb-1">‡§ï‡•Å‡§≤ ‡§∞‡•á‡§´‡§∞‡§≤‡•ç‡§∏</p>
                  <p className="text-2xl font-bold text-gray-900">{referralData.totalReferrals}</p>
                </div>
                <div className="bg-blue-100 p-3 rounded-full">
                  <span className="text-2xl">üë•</span>
                </div>
              </div>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
              className="bg-white rounded-lg shadow-lg p-6"
            >
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600 mb-1">‡§ï‡•Å‡§≤ ‡§ï‡§Æ‡§æ‡§à</p>
                  <p className="text-2xl font-bold text-gray-900">{formatCurrency(referralData.totalEarnings)}</p>
                </div>
                <div className="bg-green-100 p-3 rounded-full">
                  <span className="text-2xl">üí∞</span>
                </div>
              </div>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 }}
              className="bg-white rounded-lg shadow-lg p-6"
            >
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600 mb-1">‡§™‡•á‡§Ç‡§°‡§ø‡§Ç‡§ó ‡§Ö‡§Æ‡§æ‡§â‡§Ç‡§ü</p>
                  <p className="text-2xl font-bold text-gray-900">{formatCurrency(referralData.pendingEarnings)}</p>
                </div>
                <div className="bg-yellow-100 p-3 rounded-full">
                  <span className="text-2xl">‚è≥</span>
                </div>
              </div>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.4 }}
              className="bg-white rounded-lg shadow-lg p-6"
            >
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600 mb-1">‡§ï‡§Æ‡•Ä‡§∂‡§® ‡§∞‡•á‡§ü</p>
                  <p className="text-2xl font-bold text-gray-900">{currentTier.commission}%</p>
                </div>
                <div className={`bg-${currentTier.color}-100 p-3 rounded-full`}>
                  <span className="text-2xl">{currentTier.icon}</span>
                </div>
              </div>
            </motion.div>
          </div>

          <div className="grid lg:grid-cols-3 gap-6">
            {/* Referral Code & Sharing */}
            <div className="lg:col-span-2 space-y-6">
              {/* Referral Code */}
              <motion.div
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.5 }}
                className="bg-white rounded-lg shadow-lg p-6"
              >
                <h2 className="text-xl font-bold text-gray-900 mb-4">‡§Ü‡§™‡§ï‡§æ ‡§∞‡•á‡§´‡§∞‡§≤ ‡§ï‡•ã‡§°</h2>
                <div className="bg-gray-50 rounded-lg p-4 mb-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-gray-600 mb-1">‡§∞‡•á‡§´‡§∞‡§≤ ‡§ï‡•ã‡§°</p>
                      <p className="text-2xl font-bold text-purple-600">{referralData.referralCode}</p>
                    </div>
                    <button
                      onClick={handleCopyReferralCode}
                      className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors duration-200"
                    >
                      ‡§ï‡•â‡§™‡•Ä ‡§ï‡§∞‡•á‡§Ç
                    </button>
                  </div>
                </div>
                
                <div className="mb-4">
                  <p className="text-sm text-gray-600 mb-2">‡§∞‡•á‡§´‡§∞‡§≤ ‡§≤‡§ø‡§Ç‡§ï</p>
                  <div className="bg-gray-50 rounded-lg p-3 text-sm text-gray-800 break-all">
                    https://bharatshala.com/signup?ref={referralData.referralCode}
                  </div>
                </div>

                <div className="flex flex-wrap gap-3">
                  {socialPlatforms.map((platform, index) => (
                    <button
                      key={index}
                      onClick={() => handleShareToSocial(platform)}
                      className={`flex items-center space-x-2 px-4 py-2 bg-${platform.color}-600 text-white rounded-lg hover:bg-${platform.color}-700 transition-colors duration-200`}
                    >
                      <span>{platform.icon}</span>
                      <span>{platform.name}</span>
                    </button>
                  ))}
                </div>
              </motion.div>

              {/* Email Invites */}
              <motion.div
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.6 }}
                className="bg-white rounded-lg shadow-lg p-6"
              >
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-xl font-bold text-gray-900">‡§à‡§Æ‡•á‡§≤ ‡§á‡§®‡§µ‡§æ‡§á‡§ü</h2>
                  <button
                    onClick={() => setShowInviteForm(!showInviteForm)}
                    className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors duration-200"
                  >
                    {showInviteForm ? '‡§õ‡•Å‡§™‡§æ‡§è‡§Ç' : '‡§á‡§®‡§µ‡§æ‡§á‡§ü ‡§≠‡•á‡§ú‡•á‡§Ç'}
                  </button>
                </div>

                {showInviteForm && (
                  <form onSubmit={handleSendInvites} className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ‡§à‡§Æ‡•á‡§≤ ‡§™‡§§‡•á
                      </label>
                      {inviteForm.emails.map((email, index) => (
                        <div key={index} className="flex items-center space-x-2 mb-2">
                          <input
                            type="email"
                            value={email}
                            onChange={(e) => updateEmail(index, e.target.value)}
                            placeholder="friend@example.com"
                            className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                          />
                          {inviteForm.emails.length > 1 && (
                            <button
                              type="button"
                              onClick={() => removeEmailField(index)}
                              className="text-red-600 hover:text-red-800 p-2"
                            >
                              ‚úï
                            </button>
                          )}
                        </div>
                      ))}
                      <button
                        type="button"
                        onClick={addEmailField}
                        className="text-blue-600 hover:text-blue-800 text-sm"
                      >
                        + ‡§î‡§∞ ‡§à‡§Æ‡•á‡§≤ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
                      </button>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ‡§∏‡§Ç‡§¶‡•á‡§∂ (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï)
                      </label>
                      <textarea
                        rows={3}
                        value={inviteForm.message}
                        onChange={(e) => setInviteForm({...inviteForm, message: e.target.value})}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>

                    <button
                      type="submit"
                      className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors duration-200"
                    >
                      ‡§á‡§®‡§µ‡§æ‡§á‡§ü ‡§≠‡•á‡§ú‡•á‡§Ç
                    </button>
                  </form>
                )}
              </motion.div>

              {/* Recent Referrals */}
              <motion.div
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.7 }}
                className="bg-white rounded-lg shadow-lg p-6"
              >
                <h2 className="text-xl font-bold text-gray-900 mb-4">‡§π‡§æ‡§≤ ‡§ï‡•á ‡§∞‡•á‡§´‡§∞‡§≤‡•ç‡§∏</h2>
                
                {referralData.referrals.length === 0 ? (
                  <div className="text-center py-8">
                    <div className="text-4xl mb-4">üë•</div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-2">‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§∞‡•á‡§´‡§∞‡§≤ ‡§®‡§π‡•Ä‡§Ç</h3>
                    <p className="text-gray-600">‡§Ö‡§™‡§®‡•á ‡§¶‡•ã‡§∏‡•ç‡§§‡•ã‡§Ç ‡§ï‡•ã ‡§á‡§®‡§µ‡§æ‡§á‡§ü ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§ï‡§Æ‡§æ‡§à ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç!</p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {referralData.referrals.slice(0, 5).map((referral, index) => (
                      <div key={index} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                        <div className="flex items-center space-x-3">
                          <div className="w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center">
                            <span className="text-lg">üë§</span>
                          </div>
                          <div>
                            <p className="font-semibold text-gray-900">{referral.name || '‡§®‡§æ‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ'}</p>
                            <p className="text-sm text-gray-600">{referral.email}</p>
                            <p className="text-xs text-gray-500">
                              {new Date(referral.joinedAt).toLocaleDateString('hi-IN')} ‡§ï‡•ã ‡§ú‡•â‡§á‡§® ‡§ï‡§ø‡§Ø‡§æ
                            </p>
                          </div>
                        </div>
                        <div className="text-right">
                          <p className="font-semibold text-green-600">
                            {formatCurrency(referral.earnings || 0)}
                          </p>
                          <p className="text-xs text-gray-500">
                            {referral.status === 'active' ? '‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø' : 
                             referral.status === 'pending' ? '‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§Æ‡•á‡§Ç' : '‡§®‡§ø‡§∑‡•ç‡§ï‡•ç‡§∞‡§ø‡§Ø'}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </motion.div>
            </div>

            {/* Sidebar */}
            <div className="space-y-6">
              {/* Tier Progress */}
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.5 }}
                className="bg-white rounded-lg shadow-lg p-6"
              >
                <h3 className="text-lg font-bold text-gray-900 mb-4">‡§ü‡§ø‡§Ø‡§∞ ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡•á‡§∏</h3>
                
                <div className="mb-4">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm text-gray-600">‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§®: {currentTier.tier}</span>
                    {nextTier && (
                      <span className="text-sm text-gray-600">‡§Ö‡§ó‡§≤‡§æ: {nextTier.tier}</span>
                    )}
                  </div>
                  
                  {nextTier && (
                    <>
                      <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
                        <div 
                          className={`bg-${currentTier.color}-600 h-2 rounded-full`}
                          style={{
                            width: `${Math.min(100, (referralData.totalReferrals / nextTier.minReferrals) * 100)}%`
                          }}
                        ></div>
                      </div>
                      <p className="text-xs text-gray-600">
                        {nextTier.minReferrals - referralData.totalReferrals} ‡§î‡§∞ ‡§∞‡•á‡§´‡§∞‡§≤‡•ç‡§∏ {nextTier.tier} ‡§ü‡§ø‡§Ø‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è
                      </p>
                    </>
                  )}
                </div>

                <div className="space-y-3">
                  {referralTiers.map((tier, index) => (
                    <div 
                      key={index}
                      className={`p-3 rounded-lg border-2 ${
                        tier.tier === currentTier.tier 
                          ? `border-${tier.color}-500 bg-${tier.color}-50` 
                          : 'border-gray-200'
                      }`}
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-2">
                          <span className="text-lg">{tier.icon}</span>
                          <span className="font-semibold">{tier.tier}</span>
                        </div>
                        <span className="text-sm text-gray-600">{tier.commission}%</span>
                      </div>
                      <p className="text-xs text-gray-600 mt-1">
                        {tier.minReferrals === 0 ? '0' : tier.minReferrals}
                        {tier.maxReferrals === Infinity ? '+' : `-${tier.maxReferrals}`} ‡§∞‡•á‡§´‡§∞‡§≤‡•ç‡§∏
                      </p>
                    </div>
                  ))}
                </div>
              </motion.div>

              {/* Reward Types */}
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.6 }}
                className="bg-white rounded-lg shadow-lg p-6"
              >
                <h3 className="text-lg font-bold text-gray-900 mb-4">‡§∞‡§ø‡§µ‡§æ‡§∞‡•ç‡§°‡•ç‡§∏</h3>
                <div className="space-y-4">
                  {rewardTypes.map((reward, index) => (
                    <div key={index} className="flex items-start space-x-3">
                      <span className="text-2xl">{reward.icon}</span>
                      <div>
                        <h4 className="font-semibold text-gray-900">{reward.title}</h4>
                        <p className="text-sm text-gray-600 mb-1">{reward.description}</p>
                        <p className="text-green-600 font-semibold">{reward.reward}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </motion.div>

              {/* Terms */}
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.7 }}
                className="bg-blue-50 rounded-lg p-6"
              >
                <h3 className="font-semibold text-blue-900 mb-3">‡§®‡§ø‡§Ø‡§Æ ‡§î‡§∞ ‡§∂‡§∞‡•ç‡§§‡•á‡§Ç</h3>
                <ul className="text-blue-800 text-sm space-y-2">
                  <li>‚Ä¢ ‡§∞‡•á‡§´‡§∞‡§≤ ‡§¨‡•ã‡§®‡§∏ 30 ‡§¶‡§ø‡§® ‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§∞‡•á‡§°‡§ø‡§ü ‡§π‡•ã‡§ó‡§æ</li>
                  <li>‚Ä¢ ‡§Æ‡§ø‡§®‡§ø‡§Æ‡§Æ ‡§™‡•á‡§Ü‡§â‡§ü ‚Çπ1000 ‡§π‡•à</li>
                  <li>‚Ä¢ ‡§∏‡•á‡§≤‡•ç‡§´ ‡§∞‡•á‡§´‡§∞‡§≤ ‡§ï‡•Ä ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à</li>
                  <li>‚Ä¢ ‡§´‡•ç‡§∞‡•â‡§° ‡§è‡§ï‡•ç‡§ü‡§ø‡§µ‡§ø‡§ü‡•Ä ‡§™‡§∞ ‡§Ö‡§ï‡§æ‡§â‡§Ç‡§ü ‡§¨‡•à‡§® ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à</li>
                </ul>
              </motion.div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default ReferralProgram;