// User Dashboard Component - Bharatshaala Platform
import React, { useState, useEffect } from 'react';
import { Helmet } from 'react-helmet-async';
import { motion } from 'framer-motion';
import { Link } from 'react-router-dom';
import { useAnalytics } from '../../utils/analytics';
import { useAuth } from '../../hooks/useAuth';
import apiService from '../../utils/api';
import LoadingSpinner from '../../components/LoadingSpinner';
import { formatCurrency, formatDate } from '../../utils/helpers';

const Dashboard = () => {
  const { trackEvent, trackPageView } = useAnalytics();
  const { user } = useAuth();
  const [loading, setLoading] = useState(true);
  const [dashboardData, setDashboardData] = useState({
    orders: [],
    recentOrders: [],
    wishlistCount: 0,
    rewardPoints: 0,
    notifications: [],
    recommendations: []
  });

  const [stats, setStats] = useState({
    totalOrders: 0,
    totalSpent: 0,
    activeOrders: 0,
    completedOrders: 0
  });

  const quickActions = [
    {
      title: '‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§Ç',
      description: '‡§Ö‡§™‡§®‡•á ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§¶‡•á‡§ñ‡•á‡§Ç',
      icon: 'üì¶',
      link: '/user/orders',
      color: 'blue'
    },
    {
      title: '‡§µ‡§ø‡§∂‡§≤‡§ø‡§∏‡•ç‡§ü',
      description: '‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§Ü‡§á‡§ü‡§Æ‡•ç‡§∏ ‡§¶‡•á‡§ñ‡•á‡§Ç',
      icon: '‚ù§Ô∏è',
      link: '/wishlist',
      color: 'red'
    },
    {
      title: '‡§è‡§°‡•ç‡§∞‡•á‡§∏ ‡§¨‡•Å‡§ï',
      description: '‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§™‡§§‡•á ‡§Æ‡•à‡§®‡•á‡§ú ‡§ï‡§∞‡•á‡§Ç',
      icon: 'üìç',
      link: '/user/address-book',
      color: 'green'
    },
    {
      title: '‡§∏‡§™‡•ã‡§∞‡•ç‡§ü',
      description: '‡§π‡•á‡§≤‡•ç‡§™ ‡§î‡§∞ ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü',
      icon: 'üéß',
      link: '/user/customer-support',
      color: 'purple'
    }
  ];

  const orderStatusColors = {
    pending: 'yellow',
    confirmed: 'blue',
    shipped: 'indigo',
    delivered: 'green',
    cancelled: 'red'
  };

  const orderStatusLabels = {
    pending: '‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§Æ‡•á‡§Ç',
    confirmed: '‡§ï‡§®‡•ç‡§´‡§∞‡•ç‡§Æ',
    shipped: '‡§∂‡§ø‡§™ ‡§π‡•ã ‡§ó‡§Ø‡§æ',
    delivered: '‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞ ‡§π‡•ã ‡§ó‡§Ø‡§æ',
    cancelled: '‡§∞‡§¶‡•ç‡§¶'
  };

  useEffect(() => {
    trackPageView('user_dashboard');
    loadDashboardData();
  }, []);

  const loadDashboardData = async () => {
    try {
      setLoading(true);
      
      const [ordersResponse, wishlistResponse, notificationsResponse, recommendationsResponse] = await Promise.all([
        apiService.getOrders({ limit: 5 }),
        apiService.getWishlist(),
        apiService.getNotifications({ limit: 3 }),
        apiService.get('/user/recommendations')
      ]);

      const orders = ordersResponse.success ? ordersResponse.data : [];
      const wishlist = wishlistResponse.success ? wishlistResponse.data : [];
      const notifications = notificationsResponse.success ? notificationsResponse.data : [];
      const recommendations = recommendationsResponse.success ? recommendationsResponse.data : [];

      // Calculate stats
      const totalOrders = orders.length;
      const totalSpent = orders.reduce((sum, order) => sum + (order.total || 0), 0);
      const activeOrders = orders.filter(order => ['pending', 'confirmed', 'shipped'].includes(order.status)).length;
      const completedOrders = orders.filter(order => order.status === 'delivered').length;

      setDashboardData({
        orders,
        recentOrders: orders.slice(0, 3),
        wishlistCount: wishlist.length,
        rewardPoints: user?.rewardPoints || 0,
        notifications,
        recommendations: recommendations.slice(0, 4)
      });

      setStats({
        totalOrders,
        totalSpent,
        activeOrders,
        completedOrders
      });

    } catch (error) {
      console.error('Failed to load dashboard data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleQuickAction = (action) => {
    trackEvent('dashboard_quick_action', {
      action: action.title,
      userId: user?.id
    });
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <LoadingSpinner size="large" text="‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° ‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à..." />
      </div>
    );
  }

  return (
    <>
      <Helmet>
        <title>‡§Æ‡§æ‡§à ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° - ‡§≠‡§æ‡§∞‡§§‡§∂‡§æ‡§≤‡§æ | User Dashboard</title>
        <meta name="description" content="‡§Ö‡§™‡§®‡•á ‡§ë‡§∞‡•ç‡§°‡§∞‡•ç‡§∏, ‡§µ‡§ø‡§∂‡§≤‡§ø‡§∏‡•ç‡§ü, ‡§∞‡§ø‡§µ‡§æ‡§∞‡•ç‡§° ‡§™‡•â‡§á‡§Ç‡§ü‡•ç‡§∏ ‡§î‡§∞ ‡§Ö‡§ï‡§æ‡§â‡§Ç‡§ü ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§" />
        <meta name="robots" content="noindex, follow" />
      </Helmet>

      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-7xl mx-auto">
          {/* Welcome Section */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg p-6 mb-6"
          >
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-2xl font-bold mb-2">
                  ‡§®‡§Æ‡§∏‡•ç‡§§‡•á, {user?.firstName || '‡§™‡•ç‡§∞‡§ø‡§Ø ‡§ó‡•ç‡§∞‡§æ‡§π‡§ï'}! üëã
                </h1>
                <p className="opacity-90">
                  ‡§≠‡§æ‡§∞‡§§‡§∂‡§æ‡§≤‡§æ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§ ‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§™ ‡§Ö‡§™‡§®‡•á ‡§∏‡§≠‡•Ä ‡§ë‡§∞‡•ç‡§°‡§∞‡•ç‡§∏ ‡§î‡§∞ ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§ö‡•Ä‡§ú‡•ã‡§Ç ‡§ï‡•ã ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
                </p>
              </div>
              <div className="text-right">
                <div className="text-3xl font-bold">{dashboardData.rewardPoints}</div>
                <div className="text-sm opacity-90">‡§∞‡§ø‡§µ‡§æ‡§∞‡•ç‡§° ‡§™‡•â‡§á‡§Ç‡§ü‡•ç‡§∏</div>
              </div>
            </div>
          </motion.div>

          {/* Stats Cards */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.1 }}
              className="bg-white rounded-lg shadow-lg p-6"
            >
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600 mb-1">‡§ï‡•Å‡§≤ ‡§ë‡§∞‡•ç‡§°‡§∞‡•ç‡§∏</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.totalOrders}</p>
                </div>
                <div className="bg-blue-100 p-3 rounded-full">
                  <span className="text-2xl">üì¶</span>
                </div>
              </div>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
              className="bg-white rounded-lg shadow-lg p-6"
            >
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600 mb-1">‡§ï‡•Å‡§≤ ‡§ñ‡§∞‡•ç‡§ö</p>
                  <p className="text-2xl font-bold text-gray-900">{formatCurrency(stats.totalSpent)}</p>
                </div>
                <div className="bg-green-100 p-3 rounded-full">
                  <span className="text-2xl">üí∞</span>
                </div>
              </div>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 }}
              className="bg-white rounded-lg shadow-lg p-6"
            >
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600 mb-1">‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ë‡§∞‡•ç‡§°‡§∞‡•ç‡§∏</p>
                  <p className="text-2xl font-bold text-gray-900">{stats.activeOrders}</p>
                </div>
                <div className="bg-orange-100 p-3 rounded-full">
                  <span className="text-2xl">üöö</span>
                </div>
              </div>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.4 }}
              className="bg-white rounded-lg shadow-lg p-6"
            >
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600 mb-1">‡§µ‡§ø‡§∂‡§≤‡§ø‡§∏‡•ç‡§ü</p>
                  <p className="text-2xl font-bold text-gray-900">{dashboardData.wishlistCount}</p>
                </div>
                <div className="bg-red-100 p-3 rounded-full">
                  <span className="text-2xl">‚ù§Ô∏è</span>
                </div>
              </div>
            </motion.div>
          </div>

          <div className="grid lg:grid-cols-3 gap-6">
            {/* Quick Actions */}
            <div className="lg:col-span-1">
              <motion.div
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.5 }}
                className="bg-white rounded-lg shadow-lg p-6 mb-6"
              >
                <h2 className="text-xl font-bold text-gray-900 mb-4">‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø</h2>
                <div className="space-y-3">
                  {quickActions.map((action, index) => (
                    <Link
                      key={index}
                      to={action.link}
                      onClick={() => handleQuickAction(action)}
                      className={`flex items-center p-3 rounded-lg border-2 border-gray-100 hover:border-${action.color}-200 hover:bg-${action.color}-50 transition-colors duration-200`}
                    >
                      <span className="text-2xl mr-3">{action.icon}</span>
                      <div>
                        <h3 className="font-semibold text-gray-900">{action.title}</h3>
                        <p className="text-sm text-gray-600">{action.description}</p>
                      </div>
                    </Link>
                  ))}
                </div>
              </motion.div>

              {/* Notifications */}
              <motion.div
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.6 }}
                className="bg-white rounded-lg shadow-lg p-6"
              >
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-xl font-bold text-gray-900">‡§®‡•ã‡§ü‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§®</h2>
                  <Link to="/user/notifications" className="text-blue-600 hover:text-blue-800 text-sm">
                    ‡§∏‡§≠‡•Ä ‡§¶‡•á‡§ñ‡•á‡§Ç
                  </Link>
                </div>
                
                {dashboardData.notifications.length === 0 ? (
                  <div className="text-center py-4">
                    <div className="text-3xl mb-2">üîî</div>
                    <p className="text-gray-600">‡§ï‡•ã‡§à ‡§®‡§Ø‡§æ ‡§®‡•ã‡§ü‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§® ‡§®‡§π‡•Ä‡§Ç</p>
                  </div>
                ) : (
                  <div className="space-y-3">
                    {dashboardData.notifications.map((notification, index) => (
                      <div key={index} className="p-3 bg-blue-50 rounded-lg">
                        <h4 className="font-semibold text-gray-900 text-sm">{notification.title}</h4>
                        <p className="text-gray-600 text-xs mt-1">{notification.message}</p>
                        <p className="text-gray-500 text-xs mt-1">{formatDate(notification.createdAt)}</p>
                      </div>
                    ))}
                  </div>
                )}
              </motion.div>
            </div>

            {/* Recent Orders & Recommendations */}
            <div className="lg:col-span-2 space-y-6">
              {/* Recent Orders */}
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.7 }}
                className="bg-white rounded-lg shadow-lg p-6"
              >
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-xl font-bold text-gray-900">‡§π‡§æ‡§≤ ‡§ï‡•á ‡§ë‡§∞‡•ç‡§°‡§∞‡•ç‡§∏</h2>
                  <Link to="/user/orders" className="text-blue-600 hover:text-blue-800 text-sm">
                    ‡§∏‡§≠‡•Ä ‡§ë‡§∞‡•ç‡§°‡§∞‡•ç‡§∏ ‡§¶‡•á‡§ñ‡•á‡§Ç
                  </Link>
                </div>

                {dashboardData.recentOrders.length === 0 ? (
                  <div className="text-center py-8">
                    <div className="text-4xl mb-4">üì¶</div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-2">‡§ï‡•ã‡§à ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ</h3>
                    <p className="text-gray-600 mb-4">‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à</p>
                    <Link
                      to="/markets"
                      className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors duration-200"
                    >
                      ‡§∂‡•â‡§™‡§ø‡§Ç‡§ó ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
                    </Link>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {dashboardData.recentOrders.map((order) => (
                      <div key={order.id} className="border border-gray-200 rounded-lg p-4">
                        <div className="flex items-center justify-between mb-2">
                          <div>
                            <h3 className="font-semibold text-gray-900">‡§ë‡§∞‡•ç‡§°‡§∞ #{order.id}</h3>
                            <p className="text-sm text-gray-600">{formatDate(order.createdAt)}</p>
                          </div>
                          <div className="text-right">
                            <p className="font-semibold text-gray-900">{formatCurrency(order.total)}</p>
                            <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium bg-${orderStatusColors[order.status]}-100 text-${orderStatusColors[order.status]}-800`}>
                              {orderStatusLabels[order.status]}
                            </span>
                          </div>
                        </div>
                        
                        <div className="flex items-center justify-between">
                          <p className="text-sm text-gray-600">
                            {order.items?.length || 0} ‡§Ü‡§á‡§ü‡§Æ‡•ç‡§∏
                          </p>
                          <Link
                            to={`/user/orders/${order.id}`}
                            className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                          >
                            ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§¶‡•á‡§ñ‡•á‡§Ç ‚Üí
                          </Link>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </motion.div>

              {/* Recommendations */}
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.8 }}
                className="bg-white rounded-lg shadow-lg p-6"
              >
                <h2 className="text-xl font-bold text-gray-900 mb-4">‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•Å‡§ù‡§æ‡§µ</h2>
                
                {dashboardData.recommendations.length === 0 ? (
                  <div className="text-center py-8">
                    <div className="text-4xl mb-4">üéØ</div>
                    <p className="text-gray-600">‡§Ö‡§≠‡•Ä ‡§ï‡•ã‡§à ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à</p>
                  </div>
                ) : (
                  <div className="grid md:grid-cols-2 gap-4">
                    {dashboardData.recommendations.map((product, index) => (
                      <div key={index} className="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow duration-200">
                        <div className="flex items-center space-x-3">
                          <img
                            src={product.image || '/images/items/kundan-necklace.jpg'}
                            alt={product.name}
                            className="w-16 h-16 object-cover rounded-lg"
                          />
                          <div className="flex-1">
                            <h3 className="font-semibold text-gray-900 line-clamp-2">{product.name}</h3>
                            <p className="text-blue-600 font-semibold">{formatCurrency(product.price)}</p>
                            <div className="flex items-center space-x-1 mt-1">
                              {[...Array(5)].map((_, i) => (
                                <span key={i} className={`text-sm ${i < Math.floor(product.rating || 0) ? 'text-yellow-400' : 'text-gray-300'}`}>
                                  ‚≠ê
                                </span>
                              ))}
                            </div>
                          </div>
                        </div>
                        <button className="w-full mt-3 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors duration-200 text-sm">
                          ‡§ï‡§æ‡§∞‡•ç‡§ü ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
                        </button>
                      </div>
                    ))}
                  </div>
                )}
              </motion.div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default Dashboard;