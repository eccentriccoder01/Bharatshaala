// Contact Page for Bharatshala Platform
import React, { useState, useEffect } from 'react';
import { Helmet } from 'react-helmet-async';
import { useAnalytics } from '../analytics';
import { useNotification } from '../hooks/useNotification';
import { useValidation } from '../validation';
import { motion } from 'framer-motion';
import apiService from '../apiService';

const Contact = () => {
  const { trackPageView, trackEvent } = useAnalytics();
  const { showSuccess, showError } = useNotification();
  const { validateForm } = useValidation();

  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    subject: '',
    category: '',
    message: '',
    isVendor: false
  });

  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    trackPageView('contact');
  }, [trackPageView]);

  const contactMethods = [
    {
      title: 'рдИрдореЗрд▓ рдХрд░реЗрдВ',
      description: 'support@bharatshala.com',
      icon: 'ЁЯУз',
      color: 'emerald',
      action: () => window.open('mailto:support@bharatshala.com')
    },
    {
      title: 'рдлреЛрди рдХрд░реЗрдВ',
      description: '+91 1800-123-4567',
      icon: 'ЁЯУЮ',
      color: 'blue',
      action: () => window.open('tel:+911800123456')
    },
    {
      title: 'рд╡реНрд╣рд╛рдЯреНрд╕рдРрдк',
      description: '+91 98765-43210',
      icon: 'ЁЯТм',
      color: 'green',
      action: () => window.open('https://wa.me/919876543210')
    },
    {
      title: 'рд▓рд╛рдЗрд╡ рдЪреИрдЯ',
      description: 'рддреБрд░рдВрдд рд╕рд╣рд╛рдпрддрд╛',
      icon: 'ЁЯТн',
      color: 'orange',
      action: () => {
        trackEvent('live_chat_opened');
        // Open live chat widget
      }
    }
  ];

  const officeLocations = [
    {
      city: 'рдирдИ рджрд┐рд▓реНрд▓реА',
      address: 'рднрд╛рд░рддрд╢рд╛рд▓рд╛ рд╣рд╛рдЙрд╕, рдХрдиреЙрдЯ рдкреНрд▓реЗрд╕, рдирдИ рджрд┐рд▓реНрд▓реА - 110001',
      phone: '+91 11-4567-8901',
      email: 'delhi@bharatshala.com',
      hours: 'рд╕реЛрдорд╡рд╛рд░ - рд╢рдирд┐рд╡рд╛рд░: 9:00 AM - 6:00 PM'
    },
    {
      city: 'рдореБрдВрдмрдИ',
      address: 'рдХрд▓рд╛ рдХреЗрдВрджреНрд░, рдмрд╛рдВрджреНрд░рд╛ рдХреБрд░реНрд▓рд╛ рдХреЙрдореНрдкреНрд▓реЗрдХреНрд╕, рдореБрдВрдмрдИ - 400051',
      phone: '+91 22-4567-8902',
      email: 'mumbai@bharatshala.com',
      hours: 'рд╕реЛрдорд╡рд╛рд░ - рд╢рдирд┐рд╡рд╛рд░: 9:00 AM - 6:00 PM'
    },
    {
      city: 'рдмреЗрдВрдЧрд▓реБрд░реБ',
      address: 'рдЯреЗрдХ рдкрд╛рд░реНрдХ, рдХреЛрд░рдордВрдЧрд▓рд╛, рдмреЗрдВрдЧрд▓реБрд░реБ - 560034',
      phone: '+91 80-4567-8903',
      email: 'bangalore@bharatshala.com',
      hours: 'рд╕реЛрдорд╡рд╛рд░ - рд╢рдирд┐рд╡рд╛рд░: 9:00 AM - 6:00 PM'
    }
  ];

  const faqCategories = [
    {
      title: 'рдЦрд░реАрджрд╛рд░реА рд╕рдВрдмрдВрдзреА',
      questions: [
        'рдореИрдВ рдСрд░реНрдбрд░ рдХреИрд╕реЗ рдЯреНрд░реИрдХ рдХрд░реВрдВ?',
        'рд░рд┐рдЯрд░реНрди рдкреЙрд▓рд┐рд╕реА рдХреНрдпрд╛ рд╣реИ?',
        'рдкреЗрдореЗрдВрдЯ рдХреЗ рддрд░реАрдХреЗ рдХреМрди рд╕реЗ рд╣реИрдВ?'
      ]
    },
    {
      title: 'рд╡рд┐рдХреНрд░реЗрддрд╛ рд╕рдВрдмрдВрдзреА',
      questions: [
        'рд╡рд┐рдХреНрд░реЗрддрд╛ рдХреИрд╕реЗ рдмрдиреЗрдВ?',
        'рдХрдореАрд╢рди рдХрд┐рддрдирд╛ рд╣реИ?',
        'рдкреЗрдореЗрдВрдЯ рдХрдм рдорд┐рд▓рддрд╛ рд╣реИ?'
      ]
    },
    {
      title: 'рддрдХрдиреАрдХреА рд╕рд╣рд╛рдпрддрд╛',
      questions: [
        'рдЕрдХрд╛рдЙрдВрдЯ рдореЗрдВ рд▓реЙрдЧрд┐рди рдирд╣реАрдВ рд╣реЛ рдкрд╛ рд░рд╣рд╛',
        'рдРрдк рдХреНрд░реИрд╢ рд╣реЛ рд░рд╣рд╛ рд╣реИ',
        'рдкрд╛рд╕рд╡рд░реНрдб рд░реАрд╕реЗрдЯ рдХрд░рдирд╛ рд╣реИ'
      ]
    }
  ];

  const validationRules = {
    name: ['required', { min: 2 }, { max: 50 }],
    email: ['required', 'email'],
    phone: ['required', 'phone'],
    subject: ['required', { min: 5 }, { max: 100 }],
    category: ['required'],
    message: ['required', { min: 10 }, { max: 1000 }]
  };

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));

    // Clear error for this field
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    const validation = validateForm(formData, validationRules);
    
    if (!validation.isValid) {
      setErrors(validation.errors);
      showError('рдХреГрдкрдпрд╛ рд╕рднреА рдЖрд╡рд╢реНрдпрдХ рдлреАрд▓реНрдб рд╕рд╣реА рддрд░реАрдХреЗ рд╕реЗ рднрд░реЗрдВ');
      return;
    }

    setIsSubmitting(true);
    
    try {
      const response = await apiService.post('/contact/submit', {
        ...formData,
        timestamp: new Date().toISOString(),
        userAgent: navigator.userAgent,
        referrer: document.referrer
      });

      if (response.success) {
        trackEvent('contact_form_submitted', {
          category: formData.category,
          isVendor: formData.isVendor
        });

        showSuccess('рдЖрдкрдХрд╛ рд╕рдВрджреЗрд╢ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рднреЗрдЬрд╛ рдЧрдпрд╛! рд╣рдо 24 рдШрдВрдЯреЗ рдореЗрдВ рдЬрд╡рд╛рдм рджреЗрдВрдЧреЗред');
        
        // Reset form
        setFormData({
          name: '',
          email: '',
          phone: '',
          subject: '',
          category: '',
          message: '',
          isVendor: false
        });
        setErrors({});
      } else {
        throw new Error(response.error || 'рд╕рдВрджреЗрд╢ рднреЗрдЬрдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐');
      }
    } catch (error) {
      showError(error.message || 'рд╕рдВрджреЗрд╢ рднреЗрдЬрдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ рд╣реБрдИред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <>
      <Helmet>
        <title>рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ - рднрд╛рд░рддрд╢рд╛рд▓рд╛ | рд╣рдорд╕реЗ рдЬреБрдбрд╝реЗрдВ</title>
        <meta name="description" content="рднрд╛рд░рддрд╢рд╛рд▓рд╛ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред рд╣рдорд╛рд░реА рдЯреАрдо рдЖрдкрдХреА рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП 24/7 рдЙрдкрд▓рдмреНрдз рд╣реИред" />
        <meta name="keywords" content="рд╕рдВрдкрд░реНрдХ, рд╕рд╣рд╛рдпрддрд╛, рднрд╛рд░рддрд╢рд╛рд▓рд╛, рдЧреНрд░рд╛рд╣рдХ рд╕реЗрд╡рд╛" />
      </Helmet>

      <div className="min-h-screen bg-gradient-to-br from-emerald-50 to-orange-50">
        
        {/* Hero Section */}
        <section className="bg-gradient-to-r from-emerald-600 to-orange-500 text-white py-20">
          <div className="container mx-auto px-6 text-center">
            <motion.div
              initial={{ opacity: 0, y: 30 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.8 }}
            >
              <h1 className="text-5xl md:text-6xl font-bold mb-6">рд╣рдорд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ</h1>
              <p className="text-xl md:text-2xl opacity-90 max-w-3xl mx-auto">
                рдЖрдкрдХреЗ рд╕рд╡рд╛рд▓ рд╣рдорд╛рд░реЗ рд▓рд┐рдП рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИрдВред рд╣рдорд╛рд░реА рдЯреАрдо рдЖрдкрдХреА рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реИред
              </p>
              <div className="mt-8 text-6xl">ЁЯдЭ</div>
            </motion.div>
          </div>
        </section>

        {/* Quick Contact Methods */}
        <section className="py-16 bg-white">
          <div className="container mx-auto px-6">
            <h2 className="text-3xl font-bold text-center text-emerald-800 mb-12">рддреБрд░рдВрдд рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ</h2>
            <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-6">
              {contactMethods.map((method, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 20 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5, delay: index * 0.1 }}
                  className={`bg-gradient-to-br from-${method.color}-500 to-${method.color}-600 text-white rounded-2xl p-6 cursor-pointer hover:scale-105 transition-transform duration-200 shadow-lg`}
                  onClick={method.action}
                >
                  <div className="text-4xl mb-4">{method.icon}</div>
                  <h3 className="text-xl font-semibold mb-2">{method.title}</h3>
                  <p className="text-sm opacity-90">{method.description}</p>
                </motion.div>
              ))}
            </div>
          </div>
        </section>

        {/* Contact Form and Info */}
        <section className="py-20">
          <div className="container mx-auto px-6">
            <div className="grid lg:grid-cols-2 gap-16">
              
              {/* Contact Form */}
              <motion.div
                initial={{ opacity: 0, x: -30 }}
                whileInView={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.8 }}
                className="bg-white rounded-2xl shadow-xl p-8"
              >
                <h2 className="text-3xl font-bold text-emerald-800 mb-8">рд╕рдВрджреЗрд╢ рднреЗрдЬреЗрдВ</h2>
                
                <form onSubmit={handleSubmit} className="space-y-6">
                  {/* Name */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      рдкреВрд░рд╛ рдирд╛рдо *
                    </label>
                    <input
                      type="text"
                      name="name"
                      value={formData.name}
                      onChange={handleInputChange}
                      className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 ${
                        errors.name ? 'border-red-500' : 'border-gray-300'
                      }`}
                      placeholder="рдЖрдкрдХрд╛ рдкреВрд░рд╛ рдирд╛рдо"
                    />
                    {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name[0]}</p>}
                  </div>

                  {/* Email */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      рдИрдореЗрд▓ рдкрддрд╛ *
                    </label>
                    <input
                      type="email"
                      name="email"
                      value={formData.email}
                      onChange={handleInputChange}
                      className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 ${
                        errors.email ? 'border-red-500' : 'border-gray-300'
                      }`}
                      placeholder="рдЖрдкрдХрд╛ рдИрдореЗрд▓ рдкрддрд╛"
                    />
                    {errors.email && <p className="text-red-500 text-sm mt-1">{errors.email[0]}</p>}
                  </div>

                  {/* Phone */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      рдлреЛрди рдирдВрдмрд░ *
                    </label>
                    <input
                      type="tel"
                      name="phone"
                      value={formData.phone}
                      onChange={handleInputChange}
                      className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 ${
                        errors.phone ? 'border-red-500' : 'border-gray-300'
                      }`}
                      placeholder="+91 98765 43210"
                    />
                    {errors.phone && <p className="text-red-500 text-sm mt-1">{errors.phone[0]}</p>}
                  </div>

                  {/* Category */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      рд╡рд┐рд╖рдп рд╢реНрд░реЗрдгреА *
                    </label>
                    <select
                      name="category"
                      value={formData.category}
                      onChange={handleInputChange}
                      className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 ${
                        errors.category ? 'border-red-500' : 'border-gray-300'
                      }`}
                    >
                      <option value="">рд╢реНрд░реЗрдгреА рдЪреБрдиреЗрдВ</option>
                      <option value="general">рд╕рд╛рдорд╛рдиреНрдп рдкреНрд░рд╢реНрди</option>
                      <option value="order">рдСрд░реНрдбрд░ рд╕рдВрдмрдВрдзреА</option>
                      <option value="vendor">рд╡рд┐рдХреНрд░реЗрддрд╛ рдмрдирдирд╛</option>
                      <option value="technical">рддрдХрдиреАрдХреА рд╕рд╣рд╛рдпрддрд╛</option>
                      <option value="complaint">рд╢рд┐рдХрд╛рдпрдд</option>
                      <option value="suggestion">рд╕реБрдЭрд╛рд╡</option>
                    </select>
                    {errors.category && <p className="text-red-500 text-sm mt-1">{errors.category[0]}</p>}
                  </div>

                  {/* Subject */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      рд╡рд┐рд╖рдп *
                    </label>
                    <input
                      type="text"
                      name="subject"
                      value={formData.subject}
                      onChange={handleInputChange}
                      className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 ${
                        errors.subject ? 'border-red-500' : 'border-gray-300'
                      }`}
                      placeholder="рд╕рдВрджреЗрд╢ рдХрд╛ рд╡рд┐рд╖рдп"
                    />
                    {errors.subject && <p className="text-red-500 text-sm mt-1">{errors.subject[0]}</p>}
                  </div>

                  {/* Message */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      рд╕рдВрджреЗрд╢ *
                    </label>
                    <textarea
                      name="message"
                      value={formData.message}
                      onChange={handleInputChange}
                      rows={6}
                      className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500 resize-none ${
                        errors.message ? 'border-red-500' : 'border-gray-300'
                      }`}
                      placeholder="рдЕрдкрдирд╛ рд╕рдВрджреЗрд╢ рд╡рд┐рд╕реНрддрд╛рд░ рд╕реЗ рд▓рд┐рдЦреЗрдВ..."
                    />
                    {errors.message && <p className="text-red-500 text-sm mt-1">{errors.message[0]}</p>}
                  </div>

                  {/* Vendor Checkbox */}
                  <div className="flex items-center">
                    <input
                      type="checkbox"
                      name="isVendor"
                      checked={formData.isVendor}
                      onChange={handleInputChange}
                      className="w-4 h-4 text-emerald-600 border-gray-300 rounded focus:ring-emerald-500"
                    />
                    <label className="ml-2 text-sm text-gray-700">
                      рдореИрдВ рдПрдХ рд╡рд┐рдХреНрд░реЗрддрд╛ рдмрдирдирд╛ рдЪрд╛рд╣рддрд╛ рд╣реВрдВ
                    </label>
                  </div>

                  {/* Submit Button */}
                  <button
                    type="submit"
                    disabled={isSubmitting}
                    className="w-full bg-gradient-to-r from-emerald-500 to-orange-500 text-white py-4 rounded-lg font-semibold hover:from-emerald-600 hover:to-orange-600 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isSubmitting ? 'рднреЗрдЬрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...' : 'рд╕рдВрджреЗрд╢ рднреЗрдЬреЗрдВ'}
                  </button>
                </form>
              </motion.div>

              {/* Contact Info and FAQ */}
              <motion.div
                initial={{ opacity: 0, x: 30 }}
                whileInView={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.8 }}
                className="space-y-8"
              >
                
                {/* Office Locations */}
                <div className="bg-white rounded-2xl shadow-lg p-8">
                  <h3 className="text-2xl font-bold text-emerald-800 mb-6">рд╣рдорд╛рд░реЗ рдХрд╛рд░реНрдпрд╛рд▓рдп</h3>
                  <div className="space-y-6">
                    {officeLocations.map((office, index) => (
                      <div key={index} className="border-l-4 border-emerald-500 pl-4">
                        <h4 className="font-semibold text-lg text-gray-900">{office.city}</h4>
                        <p className="text-gray-600 text-sm mt-1">{office.address}</p>
                        <div className="mt-2 space-y-1 text-sm">
                          <p><span className="font-medium">ЁЯУЮ</span> {office.phone}</p>
                          <p><span className="font-medium">ЁЯУз</span> {office.email}</p>
                          <p><span className="font-medium">ЁЯХТ</span> {office.hours}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Quick FAQ */}
                <div className="bg-white rounded-2xl shadow-lg p-8">
                  <h3 className="text-2xl font-bold text-emerald-800 mb-6">рдЬрд▓реНрджреА рдорджрдж</h3>
                  <div className="space-y-4">
                    {faqCategories.map((category, index) => (
                      <div key={index}>
                        <h4 className="font-semibold text-orange-600 mb-2">{category.title}</h4>
                        <ul className="space-y-1 text-sm text-gray-600">
                          {category.questions.map((question, qIndex) => (
                            <li key={qIndex} className="hover:text-emerald-600 cursor-pointer">
                              тАв {question}
                            </li>
                          ))}
                        </ul>
                      </div>
                    ))}
                  </div>
                  <div className="mt-6">
                    <button className="text-emerald-600 font-medium hover:underline">
                      рд╕рднреА FAQ рджреЗрдЦреЗрдВ тЖТ
                    </button>
                  </div>
                </div>

                {/* Response Time */}
                <div className="bg-gradient-to-r from-emerald-500 to-orange-500 text-white rounded-2xl p-6 text-center">
                  <h3 className="text-xl font-bold mb-2">рддреБрд░рдВрдд рдЬрд╡рд╛рдм</h3>
                  <p className="text-sm opacity-90">рд╣рдо 2 рдШрдВрдЯреЗ рдХреЗ рдЕрдВрджрд░ рдЬрд╡рд╛рдм рджреЗрддреЗ рд╣реИрдВ</p>
                  <div className="mt-4 text-3xl">тЪб</div>
                </div>
              </motion.div>
            </div>
          </div>
        </section>

        {/* Map Section (Placeholder) */}
        <section className="py-16 bg-emerald-50">
          <div className="container mx-auto px-6">
            <h2 className="text-3xl font-bold text-center text-emerald-800 mb-12">рд╣рдорд╛рд░рд╛ рд╕реНрдерд╛рди</h2>
            <div className="bg-gray-300 rounded-2xl h-96 flex items-center justify-center">
              <div className="text-center text-gray-600">
                <div className="text-4xl mb-4">ЁЯЧ║я╕П</div>
                <p>Interactive Map Coming Soon</p>
                <p className="text-sm">Google Maps Integration</p>
              </div>
            </div>
          </div>
        </section>
      </div>
    </>
  );
};

export default Contact;