import React, { useState, useEffect } from "react";
import { useNavigate } from 'react-router-dom';
import axios from "axios";
import LoadingSpinner from "../../components/LoadingSpinner";
import VendorSidebar from "../../components/VendorSidebar";
import ImageUploader from "../../components/ImageUploader";
import "../../App.css";

const AddItem = () => {
  const [loading, setLoading] = useState(false);
  const [pageLoading, setPageLoading] = useState(true);
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    name: '',
    nameHindi: '',
    description: '',
    descriptionHindi: '',
    category: '',
    subcategory: '',
    price: '',
    originalPrice: '',
    quantity: '',
    weight: '',
    dimensions: { length: '', width: '', height: '' },
    materials: [],
    colors: [],
    tags: [],
    images: [],
    isHandmade: false,
    isCertified: false,
    certificationDetails: '',
    shippingInfo: {
      freeShipping: false,
      shippingCost: '',
      processingTime: '',
      shippingFrom: ''
    },
    seoData: {
      metaTitle: '',
      metaDescription: '',
      keywords: []
    }
  });

  const [errors, setErrors] = useState({});
  const [categories, setCategories] = useState([]);
  const [subcategories, setSubcategories] = useState([]);
  const navigate = useNavigate();

  const steps = [
    { id: 1, title: '‡§¨‡•á‡§∏‡§ø‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä', icon: 'üìù', description: '‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡§æ ‡§®‡§æ‡§Æ, ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§î‡§∞ ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä' },
    { id: 2, title: '‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§î‡§∞ ‡§∏‡•ç‡§ü‡•â‡§ï', icon: 'üí∞', description: '‡§ï‡•Ä‡§Æ‡§§, ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§î‡§∞ ‡§á‡§®‡•ç‡§µ‡•á‡§Ç‡§ü‡§∞‡•Ä ‡§µ‡§ø‡§µ‡§∞‡§£' },
    { id: 3, title: '‡§õ‡§µ‡§ø‡§Ø‡§æ‡§Ç ‡§î‡§∞ ‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ', icon: 'üì∏', description: '‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡•Ä ‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã' },
    { id: 4, title: '‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§è‡§Ç', icon: '‚ú®', description: '‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä, ‡§∞‡§Ç‡§ó ‡§î‡§∞ ‡§Ö‡§®‡•ç‡§Ø ‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§è‡§Ç' },
    { id: 5, title: '‡§∂‡§ø‡§™‡§ø‡§Ç‡§ó ‡§î‡§∞ SEO', icon: 'üöö', description: '‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§î‡§∞ ‡§ñ‡•ã‡§ú ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§®' }
  ];

  const predefinedCategories = [
    { id: 'clothing', name: '‡§µ‡§∏‡•ç‡§§‡•ç‡§∞', nameEn: 'Clothing', subcategories: ['‡§∏‡§æ‡§°‡§º‡•Ä', '‡§ï‡•Å‡§∞‡•ç‡§§‡§æ', '‡§≤‡§π‡§Ç‡§ó‡§æ', '‡§¶‡•Å‡§™‡§ü‡•ç‡§ü‡§æ', '‡§∂‡•â‡§≤'] },
    { id: 'jewelry', name: '‡§Ü‡§≠‡•Ç‡§∑‡§£', nameEn: 'Jewelry', subcategories: ['‡§π‡§æ‡§∞', '‡§ù‡•Å‡§Æ‡§ï‡•á', '‡§ö‡•Ç‡§°‡§º‡§ø‡§Ø‡§æ‡§Ç', '‡§Ö‡§Ç‡§ó‡•Ç‡§†‡§ø‡§Ø‡§æ‡§Ç', '‡§∏‡•á‡§ü‡•ç‡§∏'] },
    { id: 'handicrafts', name: '‡§π‡§∏‡•ç‡§§‡§∂‡§ø‡§≤‡•ç‡§™', nameEn: 'Handicrafts', subcategories: ['‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•á ‡§¨‡§∞‡•ç‡§§‡§®', '‡§≤‡§ï‡§°‡§º‡•Ä ‡§ï‡§æ ‡§ï‡§æ‡§Æ', '‡§ß‡§æ‡§§‡•Å ‡§ï‡§æ‡§∞‡•ç‡§Ø', '‡§ö‡§ø‡§§‡•ç‡§∞‡§ï‡§æ‡§∞‡•Ä'] },
    { id: 'books', name: '‡§™‡•Å‡§∏‡•ç‡§§‡§ï‡•á‡§Ç', nameEn: 'Books', subcategories: ['‡§∏‡§æ‡§π‡§ø‡§§‡•ç‡§Ø', '‡§ß‡§æ‡§∞‡•ç‡§Æ‡§ø‡§ï', '‡§á‡§§‡§ø‡§π‡§æ‡§∏', '‡§ï‡§µ‡§ø‡§§‡§æ', '‡§¨‡§æ‡§≤ ‡§∏‡§æ‡§π‡§ø‡§§‡•ç‡§Ø'] },
    { id: 'accessories', name: '‡§è‡§ï‡•ç‡§∏‡•á‡§∏‡§∞‡•Ä‡§ú‡§º', nameEn: 'Accessories', subcategories: ['‡§¨‡•à‡§ó‡•ç‡§∏', '‡§∏‡•ç‡§ï‡§æ‡§∞‡•ç‡§´‡§º', '‡§¨‡•á‡§≤‡•ç‡§ü‡•ç‡§∏', '‡§ò‡§°‡§º‡§ø‡§Ø‡§æ‡§Å', '‡§ö‡§∂‡•ç‡§Æ‡•á'] },
    { id: 'houseware', name: '‡§ò‡§∞‡•á‡§≤‡•Ç ‡§∏‡§æ‡§Æ‡§æ‡§®', nameEn: 'Houseware', subcategories: ['‡§∞‡§∏‡•ã‡§à', '‡§¨‡•à‡§†‡§ï', '‡§∂‡§Ø‡§®‡§ï‡§ï‡•ç‡§∑', '‡§∏‡•ç‡§®‡§æ‡§®‡§ò‡§∞', '‡§¨‡§æ‡§ó‡•Ä‡§ö‡§æ'] }
  ];

  const materialOptions = [
    '‡§∏‡•Ç‡§§‡•Ä', '‡§∞‡•á‡§∂‡§Æ', '‡§ä‡§®', '‡§≤‡§ø‡§®‡§®', '‡§ö‡§æ‡§Ç‡§¶‡•Ä', '‡§∏‡•ã‡§®‡§æ', '‡§™‡•Ä‡§§‡§≤', '‡§§‡§æ‡§Ç‡§¨‡§æ', '‡§≤‡§ï‡§°‡§º‡•Ä', '‡§¨‡§æ‡§Ç‡§∏', '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä', '‡§ö‡§Æ‡§°‡§º‡§æ', '‡§ú‡•Ç‡§ü', '‡§π‡§æ‡§•‡•Ä ‡§¶‡§æ‡§Ç‡§§', '‡§∏‡§Ç‡§ó‡§Æ‡§∞‡§Æ‡§∞'
  ];

  const colorOptions = [
    '‡§≤‡§æ‡§≤', '‡§®‡•Ä‡§≤‡§æ', '‡§π‡§∞‡§æ', '‡§™‡•Ä‡§≤‡§æ', '‡§ó‡•Å‡§≤‡§æ‡§¨‡•Ä', '‡§¨‡•à‡§Ç‡§ó‡§®‡•Ä', '‡§®‡§æ‡§∞‡§Ç‡§ó‡•Ä', '‡§ï‡§æ‡§≤‡§æ', '‡§∏‡§´‡•á‡§¶', '‡§≠‡•Ç‡§∞‡§æ', '‡§∏‡•Å‡§®‡§π‡§∞‡§æ', '‡§ö‡§æ‡§Ç‡§¶‡•Ä', '‡§Æ‡§≤‡•ç‡§ü‡•Ä‡§ï‡§≤‡§∞'
  ];

  useEffect(() => {
    loadInitialData();
    const timer = setTimeout(() => setPageLoading(false), 800);
    return () => clearTimeout(timer);
  }, []);

  useEffect(() => {
    if (formData.category) {
      const selectedCategory = predefinedCategories.find(cat => cat.id === formData.category);
      setSubcategories(selectedCategory?.subcategories || []);
    }
  }, [formData.category]);

  const loadInitialData = () => {
    setCategories(predefinedCategories);
  };

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    
    // Clear error for this field
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: ''
      }));
    }
  };

  const handleNestedInputChange = (parent, field, value) => {
    setFormData(prev => ({
      ...prev,
      [parent]: {
        ...prev[parent],
        [field]: value
      }
    }));
  };

  const handleArrayInputChange = (field, value, action = 'add') => {
    setFormData(prev => ({
      ...prev,
      [field]: action === 'add' 
        ? [...prev[field], value]
        : prev[field].filter(item => item !== value)
    }));
  };

  const validateStep = (step) => {
    const newErrors = {};

    switch (step) {
      case 1:
        if (!formData.name.trim()) newErrors.name = '‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à';
        if (!formData.description.trim()) newErrors.description = '‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à';
        if (!formData.category) newErrors.category = '‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§ö‡•Å‡§®‡§®‡§æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à';
        break;
      case 2:
        if (!formData.price || formData.price <= 0) newErrors.price = '‡§µ‡•à‡§ß ‡§ï‡•Ä‡§Æ‡§§ ‡§°‡§æ‡§≤‡•á‡§Ç';
        if (!formData.quantity || formData.quantity <= 0) newErrors.quantity = '‡§µ‡•à‡§ß ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§°‡§æ‡§≤‡•á‡§Ç';
        break;
      case 3:
        if (formData.images.length === 0) newErrors.images = '‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ ‡§è‡§ï ‡§õ‡§µ‡§ø ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à';
        break;
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const nextStep = () => {
    if (validateStep(currentStep)) {
      setCurrentStep(prev => Math.min(prev + 1, 5));
    }
  };

  const prevStep = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1));
  };

  const generateSEOData = () => {
    const metaTitle = `${formData.name} - ${formData.category} | ‡§≠‡§æ‡§∞‡§§‡§∂‡§æ‡§≤‡§æ`;
    const metaDescription = formData.description.slice(0, 155) + '...';
    const keywords = [
      formData.name,
      formData.category,
      formData.subcategory,
      ...formData.materials,
      ...formData.tags
    ].filter(Boolean);

    setFormData(prev => ({
      ...prev,
      seoData: {
        metaTitle,
        metaDescription,
        keywords
      }
    }));
  };

  const submitForm = async () => {
    if (!validateStep(currentStep)) return;

    setLoading(true);
    try {
      // Generate SEO data automatically
      generateSEOData();

      const response = await axios.post('/vendor/add-item', formData);
      
      if (response.data.success) {
        navigate('/vendor/items?success=item-added');
      } else {
        setErrors({ general: '‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à' });
      }
    } catch (error) {
      setErrors({ general: '‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç' });
    }
    setLoading(false);
  };

  if (pageLoading) {
    return <LoadingSpinner message="‡§®‡§Ø‡§æ ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§ï‡§æ ‡§™‡•á‡§ú ‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à..." />;
  }

  return (
    <React.StrictMode>
      <div className="min-h-screen bg-gradient-to-br from-emerald-50 via-green-50 to-emerald-100 pt-20">
        <div className="max-w-7xl mx-auto px-6 py-8">
          
          {/* Header */}
          <div className="mb-8">
            <h1 className="text-4xl font-bold text-emerald-800 mb-2">
              ‡§®‡§Ø‡§æ ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
            </h1>
            <p className="text-emerald-600 text-lg">
              ‡§Ö‡§™‡§®‡•á ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§Æ‡•á‡§Ç ‡§è‡§ï ‡§®‡§Ø‡§æ ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§≠‡•Ä ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§≠‡§∞‡•á‡§Ç
            </p>
          </div>

          <div className="flex gap-8">
            {/* Sidebar */}
            <div className="hidden lg:block">
              <VendorSidebar />
            </div>

            {/* Main Content */}
            <div className="flex-1">
              
              {/* Progress Steps */}
              <div className="bg-white/90 backdrop-blur-sm rounded-2xl p-6 shadow-lg mb-8">
                <div className="flex items-center justify-between">
                  {steps.map((step, index) => (
                    <React.Fragment key={step.id}>
                      <div className={`flex flex-col items-center text-center ${
                        currentStep >= step.id ? 'text-emerald-600' : 'text-gray-400'
                      }`}>
                        <div className={`w-12 h-12 rounded-full flex items-center justify-center text-xl border-2 transition-all duration-300 mb-2 ${
                          currentStep >= step.id 
                            ? 'bg-emerald-500 text-white border-emerald-500' 
                            : 'bg-white border-gray-300'
                        }`}>
                          {currentStep > step.id ? '‚úÖ' : step.icon}
                        </div>
                        <div className="max-w-[120px]">
                          <h4 className="font-semibold text-sm">{step.title}</h4>
                          <p className="text-xs text-gray-500 mt-1">{step.description}</p>
                        </div>
                      </div>
                      {index < steps.length - 1 && (
                        <div className={`flex-1 h-1 mx-4 rounded transition-all duration-300 ${
                          currentStep > step.id ? 'bg-emerald-500' : 'bg-gray-300'
                        }`}></div>
                      )}
                    </React.Fragment>
                  ))}
                </div>
              </div>

              {/* Form Content */}
              <div className="bg-white/90 backdrop-blur-sm rounded-2xl p-8 shadow-lg">
                
                {/* Step 1: Basic Information */}
                {currentStep === 1 && (
                  <div className="space-y-6">
                    <h3 className="text-2xl font-bold text-emerald-800 mb-6">‡§¨‡•á‡§∏‡§ø‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä</h3>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <label className="block text-emerald-800 font-semibold mb-2">
                          ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡§æ ‡§®‡§æ‡§Æ (‡§π‡§ø‡§Ç‡§¶‡•Ä) *
                        </label>
                        <input
                          type="text"
                          value={formData.name}
                          onChange={(e) => handleInputChange('name', e.target.value)}
                          className={`w-full px-4 py-3 border-2 rounded-xl ${
                            errors.name ? 'border-red-300' : 'border-emerald-200'
                          } focus:border-emerald-500 focus:outline-none`}
                          placeholder="‡§ú‡•à‡§∏‡•á: ‡§ï‡•Å‡§Ç‡§¶‡§® ‡§π‡§æ‡§∞"
                        />
                        {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name}</p>}
                      </div>

                      <div>
                        <label className="block text-emerald-800 font-semibold mb-2">
                          Product Name (English)
                        </label>
                        <input
                          type="text"
                          value={formData.nameHindi}
                          onChange={(e) => handleInputChange('nameHindi', e.target.value)}
                          className="w-full px-4 py-3 border-2 border-emerald-200 rounded-xl focus:border-emerald-500 focus:outline-none"
                          placeholder="e.g.: Kundan Necklace"
                        />
                      </div>
                    </div>

                    <div>
                      <label className="block text-emerald-800 font-semibold mb-2">
                        ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£ (‡§π‡§ø‡§Ç‡§¶‡•Ä) *
                      </label>
                      <textarea
                        value={formData.description}
                        onChange={(e) => handleInputChange('description', e.target.value)}
                        rows={4}
                        className={`w-full px-4 py-3 border-2 rounded-xl ${
                          errors.description ? 'border-red-300' : 'border-emerald-200'
                        } focus:border-emerald-500 focus:outline-none`}
                        placeholder="‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡§æ ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§≤‡§ø‡§ñ‡•á‡§Ç..."
                      />
                      {errors.description && <p className="text-red-500 text-sm mt-1">{errors.description}</p>}
                    </div>

                    <div>
                      <label className="block text-emerald-800 font-semibold mb-2">
                        Product Description (English)
                      </label>
                      <textarea
                        value={formData.descriptionHindi}
                        onChange={(e) => handleInputChange('descriptionHindi', e.target.value)}
                        rows={4}
                        className="w-full px-4 py-3 border-2 border-emerald-200 rounded-xl focus:border-emerald-500 focus:outline-none"
                        placeholder="Write detailed product description..."
                      />
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <label className="block text-emerald-800 font-semibold mb-2">
                          ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä *
                        </label>
                        <select
                          value={formData.category}
                          onChange={(e) => handleInputChange('category', e.target.value)}
                          className={`w-full px-4 py-3 border-2 rounded-xl ${
                            errors.category ? 'border-red-300' : 'border-emerald-200'
                          } focus:border-emerald-500 focus:outline-none`}
                        >
                          <option value="">‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç</option>
                          {categories.map(category => (
                            <option key={category.id} value={category.id}>
                              {category.name}
                            </option>
                          ))}
                        </select>
                        {errors.category && <p className="text-red-500 text-sm mt-1">{errors.category}</p>}
                      </div>

                      <div>
                        <label className="block text-emerald-800 font-semibold mb-2">
                          ‡§â‡§™-‡§∂‡•ç‡§∞‡•á‡§£‡•Ä
                        </label>
                        <select
                          value={formData.subcategory}
                          onChange={(e) => handleInputChange('subcategory', e.target.value)}
                          className="w-full px-4 py-3 border-2 border-emerald-200 rounded-xl focus:border-emerald-500 focus:outline-none"
                          disabled={!formData.category}
                        >
                          <option value="">‡§â‡§™-‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç</option>
                          {subcategories.map(sub => (
                            <option key={sub} value={sub}>{sub}</option>
                          ))}
                        </select>
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <label className="flex items-center space-x-3 p-4 border-2 border-emerald-200 rounded-xl cursor-pointer hover:bg-emerald-50">
                        <input
                          type="checkbox"
                          checked={formData.isHandmade}
                          onChange={(e) => handleInputChange('isHandmade', e.target.checked)}
                          className="w-5 h-5 text-emerald-600"
                        />
                        <div>
                          <span className="font-semibold text-emerald-800">‡§π‡§∏‡•ç‡§§‡§®‡§ø‡§∞‡•ç‡§Æ‡§ø‡§§</span>
                          <p className="text-emerald-600 text-sm">‡§Ø‡§π ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§π‡§æ‡§• ‡§∏‡•á ‡§¨‡§®‡§æ ‡§π‡•à</p>
                        </div>
                      </label>

                      <label className="flex items-center space-x-3 p-4 border-2 border-emerald-200 rounded-xl cursor-pointer hover:bg-emerald-50">
                        <input
                          type="checkbox"
                          checked={formData.isCertified}
                          onChange={(e) => handleInputChange('isCertified', e.target.checked)}
                          className="w-5 h-5 text-emerald-600"
                        />
                        <div>
                          <span className="font-semibold text-emerald-800">‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§ø‡§§</span>
                          <p className="text-emerald-600 text-sm">‡§á‡§∏ ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡•á ‡§™‡§æ‡§∏ ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§® ‡§π‡•à</p>
                        </div>
                      </label>
                    </div>

                    {formData.isCertified && (
                      <div>
                        <label className="block text-emerald-800 font-semibold mb-2">
                          ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§® ‡§µ‡§ø‡§µ‡§∞‡§£
                        </label>
                        <input
                          type="text"
                          value={formData.certificationDetails}
                          onChange={(e) => handleInputChange('certificationDetails', e.target.value)}
                          className="w-full px-4 py-3 border-2 border-emerald-200 rounded-xl focus:border-emerald-500 focus:outline-none"
                          placeholder="‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡§® ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§î‡§∞ ‡§ú‡§æ‡§∞‡•Ä‡§ï‡§∞‡•ç‡§§‡§æ"
                        />
                      </div>
                    )}
                  </div>
                )}

                {/* Step 2: Price and Stock */}
                {currentStep === 2 && (
                  <div className="space-y-6">
                    <h3 className="text-2xl font-bold text-emerald-800 mb-6">‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§î‡§∞ ‡§∏‡•ç‡§ü‡•â‡§ï</h3>
                    
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                      <div>
                        <label className="block text-emerald-800 font-semibold mb-2">
                          ‡§µ‡§ø‡§ï‡•ç‡§∞‡§Ø ‡§Æ‡•Ç‡§≤‡•ç‡§Ø (‚Çπ) *
                        </label>
                        <input
                          type="number"
                          value={formData.price}
                          onChange={(e) => handleInputChange('price', e.target.value)}
                          className={`w-full px-4 py-3 border-2 rounded-xl ${
                            errors.price ? 'border-red-300' : 'border-emerald-200'
                          } focus:border-emerald-500 focus:outline-none`}
                          placeholder="2500"
                        />
                        {errors.price && <p className="text-red-500 text-sm mt-1">{errors.price}</p>}
                      </div>

                      <div>
                        <label className="block text-emerald-800 font-semibold mb-2">
                          ‡§Æ‡•Ç‡§≤ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø (‚Çπ)
                        </label>
                        <input
                          type="number"
                          value={formData.originalPrice}
                          onChange={(e) => handleInputChange('originalPrice', e.target.value)}
                          className="w-full px-4 py-3 border-2 border-emerald-200 rounded-xl focus:border-emerald-500 focus:outline-none"
                          placeholder="3000"
                        />
                        {formData.originalPrice && formData.price && (
                          <p className="text-emerald-600 text-sm mt-1">
                            ‡§õ‡•Ç‡§ü: {Math.round(((formData.originalPrice - formData.price) / formData.originalPrice) * 100)}%
                          </p>
                        )}
                      </div>

                      <div>
                        <label className="block text-emerald-800 font-semibold mb-2">
                          ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ *
                        </label>
                        <input
                          type="number"
                          value={formData.quantity}
                          onChange={(e) => handleInputChange('quantity', e.target.value)}
                          className={`w-full px-4 py-3 border-2 rounded-xl ${
                            errors.quantity ? 'border-red-300' : 'border-emerald-200'
                          } focus:border-emerald-500 focus:outline-none`}
                          placeholder="10"
                        />
                        {errors.quantity && <p className="text-red-500 text-sm mt-1">{errors.quantity}</p>}
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <label className="block text-emerald-800 font-semibold mb-2">
                          ‡§µ‡§ú‡§® (‡§ó‡•ç‡§∞‡§æ‡§Æ)
                        </label>
                        <input
                          type="number"
                          value={formData.weight}
                          onChange={(e) => handleInputChange('weight', e.target.value)}
                          className="w-full px-4 py-3 border-2 border-emerald-200 rounded-xl focus:border-emerald-500 focus:outline-none"
                          placeholder="50"
                        />
                      </div>

                      <div>
                        <label className="block text-emerald-800 font-semibold mb-2">
                          ‡§Ü‡§Ø‡§æ‡§Æ (‡§∏‡•á‡§Æ‡•Ä)
                        </label>
                        <div className="grid grid-cols-3 gap-2">
                          <input
                            type="number"
                            value={formData.dimensions.length}
                            onChange={(e) => handleNestedInputChange('dimensions', 'length', e.target.value)}
                            className="px-3 py-3 border-2 border-emerald-200 rounded-xl focus:border-emerald-500 focus:outline-none"
                            placeholder="‡§≤‡§Ç‡§¨‡§æ‡§à"
                          />
                          <input
                            type="number"
                            value={formData.dimensions.width}
                            onChange={(e) => handleNestedInputChange('dimensions', 'width', e.target.value)}
                            className="px-3 py-3 border-2 border-emerald-200 rounded-xl focus:border-emerald-500 focus:outline-none"
                            placeholder="‡§ö‡•å‡§°‡§º‡§æ‡§à"
                          />
                          <input
                            type="number"
                            value={formData.dimensions.height}
                            onChange={(e) => handleNestedInputChange('dimensions', 'height', e.target.value)}
                            className="px-3 py-3 border-2 border-emerald-200 rounded-xl focus:border-emerald-500 focus:outline-none"
                            placeholder="‡§ä‡§Ç‡§ö‡§æ‡§à"
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* Step 3: Images and Media */}
                {currentStep === 3 && (
                  <div className="space-y-6">
                    <h3 className="text-2xl font-bold text-emerald-800 mb-6">‡§õ‡§µ‡§ø‡§Ø‡§æ‡§Ç ‡§î‡§∞ ‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ</h3>
                    
                    <div>
                      <label className="block text-emerald-800 font-semibold mb-4">
                        ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡•Ä ‡§õ‡§µ‡§ø‡§Ø‡§æ‡§Ç * (‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ 8 ‡§õ‡§µ‡§ø‡§Ø‡§æ‡§Ç)
                      </label>
                      <ImageUploader
                        images={formData.images}
                        onImagesChange={(images) => handleInputChange('images', images)}
                        maxImages={8}
                        error={errors.images}
                      />
                      {errors.images && <p className="text-red-500 text-sm mt-2">{errors.images}</p>}
                    </div>

                    <div className="bg-emerald-50 border border-emerald-200 rounded-xl p-6">
                      <h4 className="font-semibold text-emerald-800 mb-3">‡§õ‡§µ‡§ø ‡§¶‡§ø‡§∂‡§æ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂:</h4>
                      <ul className="text-emerald-700 space-y-2 text-sm">
                        <li>‚Ä¢ ‡§â‡§ö‡•ç‡§ö ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§µ‡§æ‡§≤‡•Ä ‡§õ‡§µ‡§ø‡§Ø‡§æ‡§Ç ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç (‡§®‡•ç‡§Ø‡•Ç‡§®‡§§‡§Æ 800x800 ‡§™‡§ø‡§ï‡•ç‡§∏‡•á‡§≤)</li>
                        <li>‚Ä¢ ‡§™‡§π‡§≤‡•Ä ‡§õ‡§µ‡§ø ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§õ‡§µ‡§ø ‡§π‡•ã‡§ó‡•Ä</li>
                        <li>‚Ä¢ ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§ï‡•ã‡§£‡•ã‡§Ç ‡§∏‡•á ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡•Ä ‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞‡•á‡§Ç ‡§≤‡•á‡§Ç</li>
                        <li>‚Ä¢ ‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§ ‡§´‡•â‡§∞‡•ç‡§Æ‡•á‡§ü: JPG, PNG, WEBP</li>
                        <li>‚Ä¢ ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ ‡§´‡§º‡§æ‡§á‡§≤ ‡§∏‡§æ‡§á‡§ú‡§º: 5MB ‡§™‡•ç‡§∞‡§§‡§ø ‡§õ‡§µ‡§ø</li>
                      </ul>
                    </div>
                  </div>
                )}

                {/* Step 4: Features */}
                {currentStep === 4 && (
                  <div className="space-y-6">
                    <h3 className="text-2xl font-bold text-emerald-800 mb-6">‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§è‡§Ç</h3>
                    
                    <div>
                      <label className="block text-emerald-800 font-semibold mb-3">
                        ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä
                      </label>
                      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3">
                        {materialOptions.map(material => (
                          <label key={material} className="flex items-center space-x-2 p-3 border-2 border-emerald-200 rounded-lg cursor-pointer hover:bg-emerald-50 transition-colors duration-200">
                            <input
                              type="checkbox"
                              checked={formData.materials.includes(material)}
                              onChange={(e) => handleArrayInputChange('materials', material, e.target.checked ? 'add' : 'remove')}
                              className="w-4 h-4 text-emerald-600"
                            />
                            <span className="text-emerald-700 text-sm">{material}</span>
                          </label>
                        ))}
                      </div>
                    </div>

                    <div>
                      <label className="block text-emerald-800 font-semibold mb-3">
                        ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§∞‡§Ç‡§ó
                      </label>
                      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-3">
                        {colorOptions.map(color => (
                          <label key={color} className="flex items-center space-x-2 p-3 border-2 border-emerald-200 rounded-lg cursor-pointer hover:bg-emerald-50 transition-colors duration-200">
                            <input
                              type="checkbox"
                              checked={formData.colors.includes(color)}
                              onChange={(e) => handleArrayInputChange('colors', color, e.target.checked ? 'add' : 'remove')}
                              className="w-4 h-4 text-emerald-600"
                            />
                            <span className="text-emerald-700 text-sm">{color}</span>
                          </label>
                        ))}
                      </div>
                    </div>

                    <div>
                      <label className="block text-emerald-800 font-semibold mb-2">
                        ‡§ü‡•à‡§ó‡•ç‡§∏ (‡§ñ‡•ã‡§ú ‡§ï‡•á ‡§≤‡§ø‡§è)
                      </label>
                      <input
                        type="text"
                        placeholder="‡§ü‡•à‡§ó‡•ç‡§∏ ‡§ï‡•ã ‡§ï‡•â‡§Æ‡§æ ‡§∏‡•á ‡§Ö‡§≤‡§ó ‡§ï‡§∞‡•á‡§Ç (‡§ú‡•à‡§∏‡•á: ‡§π‡§∏‡•ç‡§§‡§®‡§ø‡§∞‡•ç‡§Æ‡§ø‡§§, ‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï, ‡§ó‡§ø‡§´‡•ç‡§ü)"
                        className="w-full px-4 py-3 border-2 border-emerald-200 rounded-xl focus:border-emerald-500 focus:outline-none"
                        onKeyDown={(e) => {
                          if (e.key === 'Enter' || e.key === ',') {
                            e.preventDefault();
                            const tag = e.target.value.trim().replace(',', '');
                            if (tag && !formData.tags.includes(tag)) {
                              handleArrayInputChange('tags', tag, 'add');
                              e.target.value = '';
                            }
                          }
                        }}
                      />
                      {formData.tags.length > 0 && (
                        <div className="flex flex-wrap gap-2 mt-3">
                          {formData.tags.map(tag => (
                            <span key={tag} className="bg-emerald-100 text-emerald-700 px-3 py-1 rounded-full text-sm flex items-center space-x-2">
                              <span>{tag}</span>
                              <button
                                onClick={() => handleArrayInputChange('tags', tag, 'remove')}
                                className="text-emerald-500 hover:text-emerald-700"
                              >
                                √ó
                              </button>
                            </span>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                )}

                {/* Step 5: Shipping and SEO */}
                {currentStep === 5 && (
                  <div className="space-y-6">
                    <h3 className="text-2xl font-bold text-emerald-800 mb-6">‡§∂‡§ø‡§™‡§ø‡§Ç‡§ó ‡§î‡§∞ SEO</h3>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <label className="flex items-center space-x-3 p-4 border-2 border-emerald-200 rounded-xl cursor-pointer hover:bg-emerald-50">
                          <input
                            type="checkbox"
                            checked={formData.shippingInfo.freeShipping}
                            onChange={(e) => handleNestedInputChange('shippingInfo', 'freeShipping', e.target.checked)}
                            className="w-5 h-5 text-emerald-600"
                          />
                          <div>
                            <span className="font-semibold text-emerald-800">‡§Æ‡•Å‡§´‡•ç‡§§ ‡§∂‡§ø‡§™‡§ø‡§Ç‡§ó</span>
                            <p className="text-emerald-600 text-sm">‡§á‡§∏ ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡•Ä ‡§∂‡§ø‡§™‡§ø‡§Ç‡§ó ‡§Æ‡•Å‡§´‡•ç‡§§ ‡§π‡•à</p>
                          </div>
                        </label>
                      </div>

                      {!formData.shippingInfo.freeShipping && (
                        <div>
                          <label className="block text-emerald-800 font-semibold mb-2">
                            ‡§∂‡§ø‡§™‡§ø‡§Ç‡§ó ‡§≤‡§æ‡§ó‡§§ (‚Çπ)
                          </label>
                          <input
                            type="number"
                            value={formData.shippingInfo.shippingCost}
                            onChange={(e) => handleNestedInputChange('shippingInfo', 'shippingCost', e.target.value)}
                            className="w-full px-4 py-3 border-2 border-emerald-200 rounded-xl focus:border-emerald-500 focus:outline-none"
                            placeholder="50"
                          />
                        </div>
                      )}
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <label className="block text-emerald-800 font-semibold mb-2">
                          ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏‡§ø‡§Ç‡§ó ‡§∏‡§Æ‡§Ø
                        </label>
                        <select
                          value={formData.shippingInfo.processingTime}
                          onChange={(e) => handleNestedInputChange('shippingInfo', 'processingTime', e.target.value)}
                          className="w-full px-4 py-3 border-2 border-emerald-200 rounded-xl focus:border-emerald-500 focus:outline-none"
                        >
                          <option value="">‡§∏‡§Æ‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç</option>
                          <option value="1-2 ‡§¶‡§ø‡§®">1-2 ‡§¶‡§ø‡§®</option>
                          <option value="3-5 ‡§¶‡§ø‡§®">3-5 ‡§¶‡§ø‡§®</option>
                          <option value="1 ‡§∏‡§™‡•ç‡§§‡§æ‡§π">1 ‡§∏‡§™‡•ç‡§§‡§æ‡§π</option>
                          <option value="2 ‡§∏‡§™‡•ç‡§§‡§æ‡§π">2 ‡§∏‡§™‡•ç‡§§‡§æ‡§π</option>
                          <option value="‡§ï‡§∏‡•ç‡§ü‡§Æ ‡§∏‡§Æ‡§Ø">‡§ï‡§∏‡•ç‡§ü‡§Æ ‡§∏‡§Æ‡§Ø</option>
                        </select>
                      </div>

                      <div>
                        <label className="block text-emerald-800 font-semibold mb-2">
                          ‡§∂‡§ø‡§™ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§∏‡•ç‡§•‡§æ‡§®
                        </label>
                        <input
                          type="text"
                          value={formData.shippingInfo.shippingFrom}
                          onChange={(e) => handleNestedInputChange('shippingInfo', 'shippingFrom', e.target.value)}
                          className="w-full px-4 py-3 border-2 border-emerald-200 rounded-xl focus:border-emerald-500 focus:outline-none"
                          placeholder="‡§ú‡§Ø‡§™‡•Å‡§∞, ‡§∞‡§æ‡§ú‡§∏‡•ç‡§•‡§æ‡§®"
                        />
                      </div>
                    </div>

                    <div className="bg-blue-50 border border-blue-200 rounded-xl p-6">
                      <h4 className="font-semibold text-blue-800 mb-3">SEO ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§® (‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§)</h4>
                      <p className="text-blue-700 text-sm mb-3">
                        ‡§®‡§ø‡§Æ‡•ç‡§®‡§≤‡§ø‡§ñ‡§ø‡§§ SEO ‡§°‡•á‡§ü‡§æ ‡§Ü‡§™‡§ï‡•á ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§ú‡•á‡§®‡§∞‡•á‡§ü ‡§π‡•ã‡§ó‡§æ:
                      </p>
                      <ul className="text-blue-700 space-y-1 text-sm">
                        <li>‚Ä¢ ‡§Æ‡•á‡§ü‡§æ ‡§ü‡§æ‡§á‡§ü‡§≤: ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡§æ ‡§®‡§æ‡§Æ + ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä + ‡§≠‡§æ‡§∞‡§§‡§∂‡§æ‡§≤‡§æ</li>
                        <li>‚Ä¢ ‡§Æ‡•á‡§ü‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£: ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§ï‡§æ ‡§™‡§π‡§≤‡§æ 155 ‡§Ö‡§ï‡•ç‡§∑‡§∞</li>
                        <li>‚Ä¢ ‡§ï‡•Ä‡§µ‡§∞‡•ç‡§°‡•ç‡§∏: ‡§®‡§æ‡§Æ, ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä, ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä ‡§î‡§∞ ‡§ü‡•à‡§ó‡•ç‡§∏</li>
                        <li>‚Ä¢ URL ‡§∏‡•ç‡§≤‡§ó: ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§®‡§æ‡§Æ ‡§∏‡•á ‡§¨‡§®‡§æ SEO ‡§´‡•ç‡§∞‡•á‡§Ç‡§°‡§≤‡•Ä URL</li>
                      </ul>
                    </div>
                  </div>
                )}

                {/* Navigation Buttons */}
                <div className="flex justify-between items-center pt-8 border-t border-emerald-200">
                  <button
                    onClick={prevStep}
                    disabled={currentStep === 1}
                    className="flex items-center space-x-2 px-6 py-3 border-2 border-emerald-500 text-emerald-600 rounded-xl hover:bg-emerald-50 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300"
                  >
                    <span>‚Üê</span>
                    <span>‡§™‡§ø‡§õ‡§≤‡§æ</span>
                  </button>

                  <div className="text-emerald-600 font-medium">
                    {currentStep} / {steps.length}
                  </div>

                  {currentStep < steps.length ? (
                    <button
                      onClick={nextStep}
                      className="flex items-center space-x-2 bg-gradient-to-r from-emerald-500 to-green-500 text-white px-6 py-3 rounded-xl hover:shadow-lg transition-all duration-300 transform hover:scale-105"
                    >
                      <span>‡§Ö‡§ó‡§≤‡§æ</span>
                      <span>‚Üí</span>
                    </button>
                  ) : (
                    <button
                      onClick={submitForm}
                      disabled={loading}
                      className="flex items-center space-x-2 bg-gradient-to-r from-emerald-500 to-green-500 text-white px-8 py-3 rounded-xl hover:shadow-lg transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      {loading ? (
                        <>
                          <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                          <span>‡§ú‡•ã‡§°‡§º‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à...</span>
                        </>
                      ) : (
                        <>
                          <span>‚úÖ</span>
                          <span>‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç</span>
                        </>
                      )}
                    </button>
                  )}
                </div>

                {/* General Error */}
                {errors.general && (
                  <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-xl">
                    <p className="text-red-600 text-center">{errors.general}</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.StrictMode>
  );
};

export default AddItem;