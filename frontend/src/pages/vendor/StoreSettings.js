// Store Settings Component - Bharatshala Vendor Platform
import React, { useState, useEffect } from 'react';
import { Helmet } from 'react-helmet-async';
import { motion } from 'framer-motion';
import { useAnalytics } from '../../utils/analytics';
import apiService from '../../utils/api';
import LoadingSpinner from '../../components/LoadingSpinner';
import ImageUploader from '../../components/ImageUploader';

const StoreSettings = () => {
  const { trackEvent, trackPageView } = useAnalytics();
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [activeTab, setActiveTab] = useState('basic');
  
  const [storeData, setStoreData] = useState({
    basic: {
      storeName: '',
      tagline: '',
      description: '',
      logo: null,
      banner: null,
      categories: [],
      tags: []
    },
    contact: {
      phone: '',
      email: '',
      whatsapp: '',
      website: '',
      socialMedia: {
        facebook: '',
        instagram: '',
        twitter: '',
        youtube: ''
      }
    },
    location: {
      address: '',
      city: '',
      state: '',
      pincode: '',
      landmark: '',
      coordinates: { lat: null, lng: null }
    },
    business: {
      businessType: 'individual',
      gstNumber: '',
      panNumber: '',
      establishedYear: '',
      employeeCount: '1-10',
      businessHours: {
        monday: { open: '09:00', close: '18:00', closed: false },
        tuesday: { open: '09:00', close: '18:00', closed: false },
        wednesday: { open: '09:00', close: '18:00', closed: false },
        thursday: { open: '09:00', close: '18:00', closed: false },
        friday: { open: '09:00', close: '18:00', closed: false },
        saturday: { open: '09:00', close: '18:00', closed: false },
        sunday: { open: '10:00', close: '17:00', closed: false }
      }
    },
    seo: {
      metaTitle: '',
      metaDescription: '',
      keywords: [],
      customUrl: ''
    },
    preferences: {
      currency: 'INR',
      language: 'hi',
      timezone: 'Asia/Kolkata',
      notifications: {
        orderUpdates: true,
        marketingEmails: false,
        smsAlerts: true,
        pushNotifications: true
      },
      privacy: {
        showContactInfo: true,
        showBusinessHours: true,
        allowCustomerReviews: true,
        autoApproveReviews: false
      }
    }
  });

  const tabs = [
    { id: 'basic', name: '‡§¨‡•á‡§∏‡§ø‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä', icon: 'üè™' },
    { id: 'contact', name: '‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§µ‡§ø‡§µ‡§∞‡§£', icon: 'üìû' },
    { id: 'location', name: '‡§≤‡•ã‡§ï‡•á‡§∂‡§®', icon: 'üìç' },
    { id: 'business', name: '‡§¨‡§ø‡§ú‡§º‡§®‡•á‡§∏ ‡§°‡§ø‡§ü‡•á‡§≤‡•ç‡§∏', icon: 'üè¢' },
    { id: 'seo', name: 'SEO ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏', icon: 'üîç' },
    { id: 'preferences', name: '‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ‡§è‡§Ç', icon: '‚öôÔ∏è' }
  ];

  const businessTypes = [
    { value: 'individual', label: '‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§' },
    { value: 'partnership', label: '‡§™‡§æ‡§∞‡•ç‡§ü‡§®‡§∞‡§∂‡§ø‡§™' },
    { value: 'private_limited', label: '‡§™‡•ç‡§∞‡§æ‡§á‡§µ‡•á‡§ü ‡§≤‡§ø‡§Æ‡§ø‡§ü‡•á‡§°' },
    { value: 'llp', label: 'LLP' },
    { value: 'public_limited', label: '‡§™‡§¨‡•ç‡§≤‡§ø‡§ï ‡§≤‡§ø‡§Æ‡§ø‡§ü‡•á‡§°' },
    { value: 'sole_proprietorship', label: '‡§∏‡•ã‡§≤ ‡§™‡•ç‡§∞‡•ã‡§™‡•ç‡§∞‡§æ‡§á‡§ü‡§∞‡§∂‡§ø‡§™' }
  ];

  const employeeCounts = [
    { value: '1-10', label: '1-10 ‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä' },
    { value: '11-50', label: '11-50 ‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä' },
    { value: '51-200', label: '51-200 ‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä' },
    { value: '201-500', label: '201-500 ‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä' },
    { value: '500+', label: '500+ ‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä' }
  ];

  const indianStates = [
    '‡§Ü‡§Ç‡§ß‡•ç‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂', '‡§Ö‡§∞‡•Å‡§£‡§æ‡§ö‡§≤ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂', '‡§Ö‡§∏‡§Æ', '‡§¨‡§ø‡§π‡§æ‡§∞', '‡§õ‡§§‡•ç‡§§‡•Ä‡§∏‡§ó‡§¢‡§º', '‡§ó‡•ã‡§µ‡§æ', '‡§ó‡•Å‡§ú‡§∞‡§æ‡§§',
    '‡§π‡§∞‡§ø‡§Ø‡§æ‡§£‡§æ', '‡§π‡§ø‡§Æ‡§æ‡§ö‡§≤ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂', '‡§ù‡§æ‡§∞‡§ñ‡§Ç‡§°', '‡§ï‡§∞‡•ç‡§®‡§æ‡§ü‡§ï', '‡§ï‡•á‡§∞‡§≤', '‡§Æ‡§ß‡•ç‡§Ø ‡§™‡•ç‡§∞‡§¶‡•á‡§∂', '‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞',
    '‡§Æ‡§£‡§ø‡§™‡•Å‡§∞', '‡§Æ‡•á‡§ò‡§æ‡§≤‡§Ø', '‡§Æ‡§ø‡§ú‡•ã‡§∞‡§Æ', '‡§®‡§æ‡§ó‡§æ‡§≤‡•à‡§Ç‡§°', '‡§ì‡§°‡§ø‡§∂‡§æ', '‡§™‡§Ç‡§ú‡§æ‡§¨', '‡§∞‡§æ‡§ú‡§∏‡•ç‡§•‡§æ‡§®', '‡§∏‡§ø‡§ï‡•ç‡§ï‡§ø‡§Æ',
    '‡§§‡§Æ‡§ø‡§≤‡§®‡§æ‡§°‡•Å', '‡§§‡•á‡§≤‡§Ç‡§ó‡§æ‡§®‡§æ', '‡§§‡•ç‡§∞‡§ø‡§™‡•Å‡§∞‡§æ', '‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•ç‡§∞‡§¶‡•á‡§∂', '‡§â‡§§‡•ç‡§§‡§∞‡§æ‡§ñ‡§Ç‡§°', '‡§™‡§∂‡•ç‡§ö‡§ø‡§Æ ‡§¨‡§Ç‡§ó‡§æ‡§≤',
    '‡§¶‡§ø‡§≤‡•ç‡§≤‡•Ä', '‡§ú‡§Æ‡•ç‡§Æ‡•Ç ‡§î‡§∞ ‡§ï‡§∂‡•ç‡§Æ‡•Ä‡§∞', '‡§≤‡§¶‡•ç‡§¶‡§æ‡§ñ'
  ];

  const dayNames = {
    monday: '‡§∏‡•ã‡§Æ‡§µ‡§æ‡§∞',
    tuesday: '‡§Æ‡§Ç‡§ó‡§≤‡§µ‡§æ‡§∞',
    wednesday: '‡§¨‡•Å‡§ß‡§µ‡§æ‡§∞',
    thursday: '‡§ó‡•Å‡§∞‡•Å‡§µ‡§æ‡§∞',
    friday: '‡§∂‡•Å‡§ï‡•ç‡§∞‡§µ‡§æ‡§∞',
    saturday: '‡§∂‡§®‡§ø‡§µ‡§æ‡§∞',
    sunday: '‡§∞‡§µ‡§ø‡§µ‡§æ‡§∞'
  };

  useEffect(() => {
    trackPageView('vendor_store_settings');
    loadStoreData();
  }, []);

  const loadStoreData = async () => {
    try {
      setLoading(true);
      const response = await apiService.get('/vendor/store-settings');
      if (response.success) {
        setStoreData({ ...storeData, ...response.data });
      }
    } catch (error) {
      console.error('Failed to load store data:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async () => {
    try {
      setSaving(true);
      const response = await apiService.put('/vendor/store-settings', storeData);
      
      if (response.success) {
        trackEvent('store_settings_updated', { tab: activeTab });
        alert('‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Ö‡§™‡§°‡•á‡§ü ‡§π‡•Å‡§à‡§Ç!');
      }
    } catch (error) {
      console.error('Failed to save store settings:', error);
      alert('‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§∏‡•á‡§µ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à');
    } finally {
      setSaving(false);
    }
  };

  const updateBasic = (field, value) => {
    setStoreData({
      ...storeData,
      basic: { ...storeData.basic, [field]: value }
    });
  };

  const updateContact = (field, value) => {
    setStoreData({
      ...storeData,
      contact: { ...storeData.contact, [field]: value }
    });
  };

  const updateSocialMedia = (platform, value) => {
    setStoreData({
      ...storeData,
      contact: {
        ...storeData.contact,
        socialMedia: {
          ...storeData.contact.socialMedia,
          [platform]: value
        }
      }
    });
  };

  const updateLocation = (field, value) => {
    setStoreData({
      ...storeData,
      location: { ...storeData.location, [field]: value }
    });
  };

  const updateBusiness = (field, value) => {
    setStoreData({
      ...storeData,
      business: { ...storeData.business, [field]: value }
    });
  };

  const updateBusinessHours = (day, field, value) => {
    setStoreData({
      ...storeData,
      business: {
        ...storeData.business,
        businessHours: {
          ...storeData.business.businessHours,
          [day]: {
            ...storeData.business.businessHours[day],
            [field]: value
          }
        }
      }
    });
  };

  const updateSEO = (field, value) => {
    setStoreData({
      ...storeData,
      seo: { ...storeData.seo, [field]: value }
    });
  };

  const updatePreferences = (section, field, value) => {
    setStoreData({
      ...storeData,
      preferences: {
        ...storeData.preferences,
        [section]: typeof storeData.preferences[section] === 'object' 
          ? { ...storeData.preferences[section], [field]: value }
          : value
      }
    });
  };

  const addTag = (newTag) => {
    if (newTag && !storeData.basic.tags.includes(newTag)) {
      updateBasic('tags', [...storeData.basic.tags, newTag]);
    }
  };

  const removeTag = (tagToRemove) => {
    updateBasic('tags', storeData.basic.tags.filter(tag => tag !== tagToRemove));
  };

  const addKeyword = (newKeyword) => {
    if (newKeyword && !storeData.seo.keywords.includes(newKeyword)) {
      updateSEO('keywords', [...storeData.seo.keywords, newKeyword]);
    }
  };

  const removeKeyword = (keywordToRemove) => {
    updateSEO('keywords', storeData.seo.keywords.filter(keyword => keyword !== keywordToRemove));
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <LoadingSpinner size="large" text="‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡§Ç..." />
      </div>
    );
  }

  return (
    <>
      <Helmet>
        <title>‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ - ‡§≠‡§æ‡§∞‡§§‡§∂‡§æ‡§≤‡§æ ‡§µ‡•á‡§Ç‡§°‡§∞ | Store Settings</title>
        <meta name="description" content="‡§Ö‡§™‡§®‡•Ä ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä, ‡§ï‡•â‡§®‡•ç‡§ü‡•à‡§ï‡•ç‡§ü ‡§°‡§ø‡§ü‡•á‡§≤‡•ç‡§∏, ‡§¨‡§ø‡§ú‡§º‡§®‡•á‡§∏ ‡§Ü‡§µ‡§∞‡•ç‡§∏ ‡§î‡§∞ SEO ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§Æ‡•à‡§®‡•á‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§" />
        <meta name="robots" content="noindex, follow" />
      </Helmet>

      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-6xl mx-auto">
          {/* Header */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-white rounded-lg shadow-lg p-6 mb-6"
          >
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-2xl font-bold text-gray-900">‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏</h1>
                <p className="text-gray-600">‡§Ö‡§™‡§®‡•Ä ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡•Ä ‡§™‡•Ç‡§∞‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Æ‡•à‡§®‡•á‡§ú ‡§ï‡§∞‡•á‡§Ç</p>
              </div>
              <button
                onClick={handleSave}
                disabled={saving}
                className="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition-colors duration-200 disabled:opacity-50"
              >
                {saving ? '‡§∏‡•á‡§µ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...' : '‡§∏‡§≠‡•Ä ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç'}
              </button>
            </div>
          </motion.div>

          {/* Tabs */}
          <div className="bg-white rounded-lg shadow-lg mb-6">
            <div className="border-b border-gray-200">
              <nav className="flex space-x-8 px-6 overflow-x-auto">
                {tabs.map((tab) => (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`flex items-center space-x-2 py-4 border-b-2 font-medium text-sm transition-colors duration-200 whitespace-nowrap ${
                      activeTab === tab.id
                        ? 'border-green-500 text-green-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700'
                    }`}
                  >
                    <span>{tab.icon}</span>
                    <span>{tab.name}</span>
                  </button>
                ))}
              </nav>
            </div>

            <div className="p-6">
              {/* Basic Information Tab */}
              {activeTab === 'basic' && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="space-y-6"
                >
                  <div className="grid md:grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§æ ‡§®‡§æ‡§Æ *
                      </label>
                      <input
                        type="text"
                        value={storeData.basic.storeName}
                        onChange={(e) => updateBasic('storeName', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                        placeholder="‡§Ü‡§™‡§ï‡•á ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§æ ‡§®‡§æ‡§Æ"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ‡§ü‡•à‡§ó‡§≤‡§æ‡§á‡§®
                      </label>
                      <input
                        type="text"
                        value={storeData.basic.tagline}
                        onChange={(e) => updateBasic('tagline', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                        placeholder="‡§Ü‡§™‡§ï‡•á ‡§¨‡§ø‡§ú‡§º‡§®‡•á‡§∏ ‡§ï‡•Ä ‡§ü‡•à‡§ó‡§≤‡§æ‡§á‡§®"
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£ *
                    </label>
                    <textarea
                      rows={4}
                      value={storeData.basic.description}
                      onChange={(e) => updateBasic('description', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                      placeholder="‡§Ö‡§™‡§®‡•á ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§∏‡•á ‡§¨‡§§‡§æ‡§è‡§Ç..."
                    />
                  </div>

                  <div className="grid md:grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§≤‡•ã‡§ó‡•ã
                      </label>
                      <ImageUploader
                        currentImage={storeData.basic.logo}
                        onImageSelect={(image) => updateBasic('logo', image)}
                        aspectRatio="1:1"
                        maxSize={2}
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§¨‡•à‡§®‡§∞
                      </label>
                      <ImageUploader
                        currentImage={storeData.basic.banner}
                        onImageSelect={(image) => updateBasic('banner', image)}
                        aspectRatio="16:9"
                        maxSize={5}
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ü‡•à‡§ó‡•ç‡§∏
                    </label>
                    <div className="flex flex-wrap gap-2 mb-2">
                      {storeData.basic.tags.map((tag, index) => (
                        <span
                          key={index}
                          className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm flex items-center"
                        >
                          {tag}
                          <button
                            onClick={() => removeTag(tag)}
                            className="ml-2 text-green-600 hover:text-green-800"
                          >
                            ‚úï
                          </button>
                        </span>
                      ))}
                    </div>
                    <input
                      type="text"
                      placeholder="‡§®‡§Ø‡§æ ‡§ü‡•à‡§ó ‡§è‡§Ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ Enter ‡§¶‡§¨‡§æ‡§è‡§Ç"
                      onKeyPress={(e) => {
                        if (e.key === 'Enter') {
                          addTag(e.target.value.trim());
                          e.target.value = '';
                        }
                      }}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                    />
                  </div>
                </motion.div>
              )}

              {/* Contact Information Tab */}
              {activeTab === 'contact' && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="space-y-6"
                >
                  <div className="grid md:grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ *
                      </label>
                      <input
                        type="tel"
                        value={storeData.contact.phone}
                        onChange={(e) => updateContact('phone', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                        placeholder="+91 9876543210"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ‡§à‡§Æ‡•á‡§≤ *
                      </label>
                      <input
                        type="email"
                        value={storeData.contact.email}
                        onChange={(e) => updateContact('email', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                        placeholder="store@example.com"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ‡§µ‡•ç‡§π‡§æ‡§ü‡•ç‡§∏‡§ê‡§™ ‡§®‡§Ç‡§¨‡§∞
                      </label>
                      <input
                        type="tel"
                        value={storeData.contact.whatsapp}
                        onChange={(e) => updateContact('whatsapp', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                        placeholder="+91 9876543210"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü
                      </label>
                      <input
                        type="url"
                        value={storeData.contact.website}
                        onChange={(e) => updateContact('website', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                        placeholder="https://yourstore.com"
                      />
                    </div>
                  </div>

                  <div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">‡§∏‡•ã‡§∂‡§≤ ‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ</h3>
                    <div className="grid md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Facebook
                        </label>
                        <input
                          type="url"
                          value={storeData.contact.socialMedia.facebook}
                          onChange={(e) => updateSocialMedia('facebook', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                          placeholder="https://facebook.com/yourstore"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Instagram
                        </label>
                        <input
                          type="url"
                          value={storeData.contact.socialMedia.instagram}
                          onChange={(e) => updateSocialMedia('instagram', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                          placeholder="https://instagram.com/yourstore"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Twitter
                        </label>
                        <input
                          type="url"
                          value={storeData.contact.socialMedia.twitter}
                          onChange={(e) => updateSocialMedia('twitter', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                          placeholder="https://twitter.com/yourstore"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          YouTube
                        </label>
                        <input
                          type="url"
                          value={storeData.contact.socialMedia.youtube}
                          onChange={(e) => updateSocialMedia('youtube', e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                          placeholder="https://youtube.com/yourstore"
                        />
                      </div>
                    </div>
                  </div>
                </motion.div>
              )}

              {/* Location Tab */}
              {activeTab === 'location' && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="space-y-6"
                >
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      ‡§™‡•Ç‡§∞‡§æ ‡§™‡§§‡§æ *
                    </label>
                    <textarea
                      rows={3}
                      value={storeData.location.address}
                      onChange={(e) => updateLocation('address', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                      placeholder="‡§¶‡•Å‡§ï‡§æ‡§® ‡§ï‡§æ ‡§™‡•Ç‡§∞‡§æ ‡§™‡§§‡§æ..."
                    />
                  </div>

                  <div className="grid md:grid-cols-3 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ‡§∂‡§π‡§∞ *
                      </label>
                      <input
                        type="text"
                        value={storeData.location.city}
                        onChange={(e) => updateLocation('city', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ‡§∞‡§æ‡§ú‡•ç‡§Ø *
                      </label>
                      <select
                        value={storeData.location.state}
                        onChange={(e) => updateLocation('state', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                      >
                        <option value="">‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§ö‡•Å‡§®‡•á‡§Ç</option>
                        {indianStates.map((state) => (
                          <option key={state} value={state}>{state}</option>
                        ))}
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ‡§™‡§ø‡§®‡§ï‡•ã‡§° *
                      </label>
                      <input
                        type="text"
                        value={storeData.location.pincode}
                        onChange={(e) => updateLocation('pincode', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                        pattern="[0-9]{6}"
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      ‡§≤‡•à‡§Ç‡§°‡§Æ‡§æ‡§∞‡•ç‡§ï
                    </label>
                    <input
                      type="text"
                      value={storeData.location.landmark}
                      onChange={(e) => updateLocation('landmark', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                      placeholder="‡§™‡§æ‡§∏ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§∏‡§ø‡§¶‡•ç‡§ß ‡§∏‡•ç‡§•‡§æ‡§®"
                    />
                  </div>
                </motion.div>
              )}

              {/* Business Details Tab */}
              {activeTab === 'business' && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="space-y-6"
                >
                  <div className="grid md:grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ‡§¨‡§ø‡§ú‡§º‡§®‡•á‡§∏ ‡§ü‡§æ‡§á‡§™ *
                      </label>
                      <select
                        value={storeData.business.businessType}
                        onChange={(e) => updateBusiness('businessType', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                      >
                        {businessTypes.map((type) => (
                          <option key={type.value} value={type.value}>{type.label}</option>
                        ))}
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ
                      </label>
                      <select
                        value={storeData.business.employeeCount}
                        onChange={(e) => updateBusiness('employeeCount', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                      >
                        {employeeCounts.map((count) => (
                          <option key={count.value} value={count.value}>{count.label}</option>
                        ))}
                      </select>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        ‡§∏‡•ç‡§•‡§æ‡§™‡§®‡§æ ‡§µ‡§∞‡•ç‡§∑
                      </label>
                      <input
                        type="number"
                        value={storeData.business.establishedYear}
                        onChange={(e) => updateBusiness('establishedYear', e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                        min="1900"
                        max={new Date().getFullYear()}
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        PAN ‡§®‡§Ç‡§¨‡§∞ *
                      </label>
                      <input
                        type="text"
                        value={storeData.business.panNumber}
                        onChange={(e) => updateBusiness('panNumber', e.target.value.toUpperCase())}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                        placeholder="ABCDE1234F"
                        maxLength="10"
                      />
                    </div>

                    <div className="md:col-span-2">
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        GST ‡§®‡§Ç‡§¨‡§∞ (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï)
                      </label>
                      <input
                        type="text"
                        value={storeData.business.gstNumber}
                        onChange={(e) => updateBusiness('gstNumber', e.target.value.toUpperCase())}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                        placeholder="22AAAAA0000A1Z5"
                        maxLength="15"
                      />
                    </div>
                  </div>

                  <div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">‡§¨‡§ø‡§ú‡§º‡§®‡•á‡§∏ ‡§Ü‡§µ‡§∞‡•ç‡§∏</h3>
                    <div className="space-y-3">
                      {Object.entries(storeData.business.businessHours).map(([day, hours]) => (
                        <div key={day} className="flex items-center space-x-4">
                          <div className="w-20">
                            <span className="text-sm font-medium text-gray-700">
                              {dayNames[day]}
                            </span>
                          </div>
                          <div className="flex items-center space-x-2">
                            <input
                              type="checkbox"
                              checked={!hours.closed}
                              onChange={(e) => updateBusinessHours(day, 'closed', !e.target.checked)}
                              className="mr-2"
                            />
                            <span className="text-sm text-gray-600">‡§ñ‡•Å‡§≤‡§æ</span>
                          </div>
                          {!hours.closed && (
                            <>
                              <input
                                type="time"
                                value={hours.open}
                                onChange={(e) => updateBusinessHours(day, 'open', e.target.value)}
                                className="px-3 py-1 border border-gray-300 rounded"
                              />
                              <span>‡§∏‡•á</span>
                              <input
                                type="time"
                                value={hours.close}
                                onChange={(e) => updateBusinessHours(day, 'close', e.target.value)}
                                className="px-3 py-1 border border-gray-300 rounded"
                              />
                              <span>‡§§‡§ï</span>
                            </>
                          )}
                          {hours.closed && (
                            <span className="text-red-600 text-sm">‡§¨‡§Ç‡§¶</span>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                </motion.div>
              )}

              {/* SEO Settings Tab */}
              {activeTab === 'seo' && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="space-y-6"
                >
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      ‡§Æ‡•á‡§ü‡§æ ‡§ü‡§æ‡§á‡§ü‡§≤
                    </label>
                    <input
                      type="text"
                      value={storeData.seo.metaTitle}
                      onChange={(e) => updateSEO('metaTitle', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                      placeholder="‡§Ü‡§™‡§ï‡•á ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§æ SEO ‡§ü‡§æ‡§á‡§ü‡§≤"
                      maxLength="60"
                    />
                    <p className="text-xs text-gray-500 mt-1">60 ‡§ï‡•à‡§∞‡•á‡§ï‡•ç‡§ü‡§∞ ‡§Ø‡§æ ‡§ï‡§Æ ‡§∞‡§ñ‡•á‡§Ç</p>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      ‡§Æ‡•á‡§ü‡§æ ‡§°‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§®
                    </label>
                    <textarea
                      rows={3}
                      value={storeData.seo.metaDescription}
                      onChange={(e) => updateSEO('metaDescription', e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                      placeholder="‡§Ü‡§™‡§ï‡•á ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡§æ SEO ‡§°‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§®"
                      maxLength="160"
                    />
                    <p className="text-xs text-gray-500 mt-1">160 ‡§ï‡•à‡§∞‡•á‡§ï‡•ç‡§ü‡§∞ ‡§Ø‡§æ ‡§ï‡§Æ ‡§∞‡§ñ‡•á‡§Ç</p>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      ‡§ï‡•Ä‡§µ‡§∞‡•ç‡§°‡•ç‡§∏
                    </label>
                    <div className="flex flex-wrap gap-2 mb-2">
                      {storeData.seo.keywords.map((keyword, index) => (
                        <span
                          key={index}
                          className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm flex items-center"
                        >
                          {keyword}
                          <button
                            onClick={() => removeKeyword(keyword)}
                            className="ml-2 text-blue-600 hover:text-blue-800"
                          >
                            ‚úï
                          </button>
                        </span>
                      ))}
                    </div>
                    <input
                      type="text"
                      placeholder="‡§®‡§Ø‡§æ ‡§ï‡•Ä‡§µ‡§∞‡•ç‡§° ‡§è‡§Ç‡§ü‡§∞ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ Enter ‡§¶‡§¨‡§æ‡§è‡§Ç"
                      onKeyPress={(e) => {
                        if (e.key === 'Enter') {
                          addKeyword(e.target.value.trim());
                          e.target.value = '';
                        }
                      }}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      ‡§ï‡§∏‡•ç‡§ü‡§Æ URL ‡§∏‡•ç‡§≤‡§ó
                    </label>
                    <div className="flex">
                      <span className="inline-flex items-center px-3 rounded-l-lg border border-r-0 border-gray-300 bg-gray-50 text-gray-500 sm:text-sm">
                        bharatshala.com/store/
                      </span>
                      <input
                        type="text"
                        value={storeData.seo.customUrl}
                        onChange={(e) => updateSEO('customUrl', e.target.value.toLowerCase().replace(/[^a-z0-9-]/g, ''))}
                        className="flex-1 px-3 py-2 border border-gray-300 rounded-r-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                        placeholder="your-store-name"
                      />
                    </div>
                  </div>
                </motion.div>
              )}

              {/* Preferences Tab */}
              {activeTab === 'preferences' && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="space-y-6"
                >
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">‡§ú‡•á‡§®‡§∞‡§≤ ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ‡§è‡§Ç</h3>
                    <div className="grid md:grid-cols-3 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          ‡§ï‡§∞‡•á‡§Ç‡§∏‡•Ä
                        </label>
                        <select
                          value={storeData.preferences.currency}
                          onChange={(e) => updatePreferences('currency', null, e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                        >
                          <option value="INR">‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§∞‡•Å‡§™‡§Ø‡§æ (‚Çπ)</option>
                          <option value="USD">US ‡§°‡•â‡§≤‡§∞ ($)</option>
                        </select>
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          ‡§≠‡§æ‡§∑‡§æ
                        </label>
                        <select
                          value={storeData.preferences.language}
                          onChange={(e) => updatePreferences('language', null, e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                        >
                          <option value="hi">‡§π‡§ø‡§Ç‡§¶‡•Ä</option>
                          <option value="en">English</option>
                        </select>
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          ‡§ü‡§æ‡§á‡§Æ‡§ú‡•ã‡§®
                        </label>
                        <select
                          value={storeData.preferences.timezone}
                          onChange={(e) => updatePreferences('timezone', null, e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
                        >
                          <option value="Asia/Kolkata">‡§≠‡§æ‡§∞‡§§ (IST)</option>
                          <option value="UTC">UTC</option>
                        </select>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">‡§®‡•ã‡§ü‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§® ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ‡§è‡§Ç</h3>
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <div>
                          <h4 className="font-medium text-gray-900">‡§ë‡§∞‡•ç‡§°‡§∞ ‡§Ö‡§™‡§°‡•á‡§ü‡•ç‡§∏</h4>
                          <p className="text-sm text-gray-600">‡§®‡§è ‡§ë‡§∞‡•ç‡§°‡§∞‡•ç‡§∏ ‡§î‡§∞ ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§Ö‡§™‡§°‡•á‡§ü‡•ç‡§∏</p>
                        </div>
                        <input
                          type="checkbox"
                          checked={storeData.preferences.notifications.orderUpdates}
                          onChange={(e) => updatePreferences('notifications', 'orderUpdates', e.target.checked)}
                          className="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded"
                        />
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <h4 className="font-medium text-gray-900">‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡§ø‡§Ç‡§ó ‡§à‡§Æ‡•á‡§≤‡•ç‡§∏</h4>
                          <p className="text-sm text-gray-600">‡§™‡•ç‡§∞‡§Æ‡•ã‡§∂‡§®‡§≤ ‡§à‡§Æ‡•á‡§≤‡•ç‡§∏ ‡§î‡§∞ ‡§ë‡§´‡§∞‡•ç‡§∏</p>
                        </div>
                        <input
                          type="checkbox"
                          checked={storeData.preferences.notifications.marketingEmails}
                          onChange={(e) => updatePreferences('notifications', 'marketingEmails', e.target.checked)}
                          className="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded"
                        />
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <h4 className="font-medium text-gray-900">SMS ‡§Ö‡§≤‡§∞‡•ç‡§ü‡•ç‡§∏</h4>
                          <p className="text-sm text-gray-600">‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§Ö‡§™‡§°‡•á‡§ü‡•ç‡§∏ SMS ‡§™‡§∞</p>
                        </div>
                        <input
                          type="checkbox"
                          checked={storeData.preferences.notifications.smsAlerts}
                          onChange={(e) => updatePreferences('notifications', 'smsAlerts', e.target.checked)}
                          className="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded"
                        />
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <h4 className="font-medium text-gray-900">‡§™‡•Å‡§∂ ‡§®‡•ã‡§ü‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§®‡•ç‡§∏</h4>
                          <p className="text-sm text-gray-600">‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§®‡•ã‡§ü‡§ø‡§´‡§ø‡§ï‡•á‡§∂‡§®‡•ç‡§∏</p>
                        </div>
                        <input
                          type="checkbox"
                          checked={storeData.preferences.notifications.pushNotifications}
                          onChange={(e) => updatePreferences('notifications', 'pushNotifications', e.target.checked)}
                          className="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded"
                        />
                      </div>
                    </div>
                  </div>

                  <div>
                    <h3 className="text-lg font-semibold text-gray-900 mb-4">‡§™‡•ç‡§∞‡§æ‡§á‡§µ‡•á‡§∏‡•Ä ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏</h3>
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <div>
                          <h4 className="font-medium text-gray-900">‡§ï‡•â‡§®‡•ç‡§ü‡•à‡§ï‡•ç‡§ü ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç</h4>
                          <p className="text-sm text-gray-600">‡§ï‡§∏‡•ç‡§ü‡§Æ‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§´‡•ã‡§® ‡§î‡§∞ ‡§à‡§Æ‡•á‡§≤ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç</p>
                        </div>
                        <input
                          type="checkbox"
                          checked={storeData.preferences.privacy.showContactInfo}
                          onChange={(e) => updatePreferences('privacy', 'showContactInfo', e.target.checked)}
                          className="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded"
                        />
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <h4 className="font-medium text-gray-900">‡§¨‡§ø‡§ú‡§º‡§®‡•á‡§∏ ‡§Ü‡§µ‡§∞‡•ç‡§∏ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç</h4>
                          <p className="text-sm text-gray-600">‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§ï‡•á ‡§ñ‡•Å‡§≤‡§®‡•á ‡§ï‡§æ ‡§∏‡§Æ‡§Ø ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç</p>
                        </div>
                        <input
                          type="checkbox"
                          checked={storeData.preferences.privacy.showBusinessHours}
                          onChange={(e) => updatePreferences('privacy', 'showBusinessHours', e.target.checked)}
                          className="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded"
                        />
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <h4 className="font-medium text-gray-900">‡§ï‡§∏‡•ç‡§ü‡§Æ‡§∞ ‡§∞‡§ø‡§µ‡•ç‡§Ø‡•Ç‡§ú ‡§Ö‡§®‡•Å‡§Æ‡§§‡§ø ‡§¶‡•á‡§Ç</h4>
                          <p className="text-sm text-gray-600">‡§ï‡§∏‡•ç‡§ü‡§Æ‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§∞‡§ø‡§µ‡•ç‡§Ø‡•Ç ‡§≤‡§ø‡§ñ‡§®‡•á ‡§¶‡•á‡§Ç</p>
                        </div>
                        <input
                          type="checkbox"
                          checked={storeData.preferences.privacy.allowCustomerReviews}
                          onChange={(e) => updatePreferences('privacy', 'allowCustomerReviews', e.target.checked)}
                          className="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded"
                        />
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <h4 className="font-medium text-gray-900">‡§∞‡§ø‡§µ‡•ç‡§Ø‡•Ç‡§ú ‡§ë‡§ü‡•ã ‡§Ö‡§™‡•ç‡§∞‡•Ç‡§µ ‡§ï‡§∞‡•á‡§Ç</h4>
                          <p className="text-sm text-gray-600">‡§¨‡§ø‡§®‡§æ ‡§ö‡•á‡§ï ‡§ï‡§ø‡§è ‡§∞‡§ø‡§µ‡•ç‡§Ø‡•Ç‡§ú ‡§™‡§¨‡•ç‡§≤‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç</p>
                        </div>
                        <input
                          type="checkbox"
                          checked={storeData.preferences.privacy.autoApproveReviews}
                          onChange={(e) => updatePreferences('privacy', 'autoApproveReviews', e.target.checked)}
                          className="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded"
                        />
                      </div>
                    </div>
                  </div>
                </motion.div>
              )}
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default StoreSettings;